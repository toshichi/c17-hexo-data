<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码渣十七</title>
  <icon>https://www.coder17.com/images/favicon-32x32.png</icon>
  <subtitle>雑魚ーダーの雑魚メモ</subtitle>
  <link href="https://www.coder17.com/atom.xml" rel="self"/>
  
  <link href="https://www.coder17.com/"/>
  <updated>2020-08-23T15:00:00.000Z</updated>
  <id>https://www.coder17.com/</id>
  
  <author>
    <name>東城十七</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 10 USB 图标改变解决</title>
    <link href="https://www.coder17.com/posts/windows-10-usb-icon-fix/"/>
    <id>https://www.coder17.com/posts/windows-10-usb-icon-fix/</id>
    <published>2020-08-23T15:00:00.000Z</published>
    <updated>2020-08-23T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 的驱动服务器在 2019 年 11 月左右出现了一次 bug 导致所有的U盘图标均变为机柜，即使使用 <code>autorun.inf</code> 修改磁盘图标也无法生效，且单击弹出磁盘时，所有的设备名均变为 Device。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/20191110175553.png" alt="20191110175553"></p><p>原因是 Windows 会联网获取设备驱动与图标，因此服务器端问题会影响本机驱动。驱动服务器问题后来已经修复，但本机已经下载的 USB 驱动还在，因此问题会残留。解决方案是删除已缓存的驱动程序。</p><ul><li><p>打开 <code>C:\ProgramData\Microsoft\Windows\DeviceMetadataCache\dmrccache\en-us</code> 如果目录下有文件，寻找在其中 <code>DeviceInformation</code> 目录中含有 <code>ico2001.ico</code> 的机柜图标的目录，并删除该目录。</p></li><li><p>重启</p></li><li><p>如果没有恢复，或者上述目录中没有文件，则打开控制面板，设备和打印机，删除最下面的无法识别的 Device</p><p>  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824195700272.png" alt="image-20200824195700272"></p></li><li><p>重新插拔设备，应该可以恢复。此时查看上述目录，应该已经没有文件存在。弹出磁盘的菜单也应恢复显示设备名。</p><p>  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824195842372.png" alt="image-20200824195842372">  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824200746369.png" alt="image-20200824200746369"></p></li></ul><p>参考/图片：<a href="https://noushibou.hatenadiary.jp/entry/2019/11/10/101358">https://noushibou.hatenadiary.jp/entry/2019/11/10/101358</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows 的驱动服务器在 2019 年 11 月左右出现了一次 bug 导致所有的U盘图标均变为机柜，即使使用 &lt;code&gt;autorun.inf&lt;/code&gt; 修改磁盘图标也无法生效，且单击弹出磁盘时，所有的设备名均变为 Device。&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="图标" scheme="https://www.coder17.com/tags/%E5%9B%BE%E6%A0%87/"/>
    
    <category term="Windows 10" scheme="https://www.coder17.com/tags/Windows-10/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 普通用户环境变量不生效解决</title>
    <link href="https://www.coder17.com/posts/qnap-env-var/"/>
    <id>https://www.coder17.com/posts/qnap-env-var/</id>
    <published>2020-08-02T14:55:00.000Z</published>
    <updated>2020-08-02T14:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>内置 admin 用户的 home 位于 <code>/root</code> ，而新建用户的 home 位于 <code>/share/homes/USERNAME</code>。此目录缺乏各种 rc 文件。导致安装 opkg 等第三方工具时无法自动设置 path。</p><p>解决方案为使用普通用户登录 SSH 并定位到 home，然后把 root 目录里的各种配置文件软链接过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/.bash_logout .bash_logout</span><br><span class="line">ln -s /root/.bash_profile .bash_profile</span><br><span class="line">ln -s /root/.bashrc .bashrc</span><br><span class="line">ln -s /root/.profile .profile</span><br></pre></td></tr></table></figure><p>修改后普通用户的 prompt 也会变成 <code>#</code> ，非常迷惑，原因是 PS1 变量在 <code>.profile</code> 中被修改，<code>sudo vim .profile</code> 编辑该文件，注释掉第一行的修改语句即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export PS1=&#x27;[\w] # &#x27;</span></span><br><span class="line">reset</span><br><span class="line"><span class="built_in">source</span> /opt/etc/profile</span><br></pre></td></tr></table></figure><p>威联通的系统似乎没有考虑过建立普通用户日常使用的问题，默认思维模式都是使用内置 admin 账户完成，软件质量比较一般。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内置 admin 用户的 home 位于 &lt;code&gt;/root&lt;/code&gt; ，而新建用户的 home 位于 &lt;code&gt;/share/homes/USERNAME&lt;/code&gt;。此目录缺乏各种 rc 文件。导致安装 opkg 等第三方工具时无法自动设置 path。&lt;/p</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="环境变量" scheme="https://www.coder17.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>废物利用为 Galaxy S6 SM-G9200 刷入可用系统</title>
    <link href="https://www.coder17.com/posts/galaxy-s6-system/"/>
    <id>https://www.coder17.com/posts/galaxy-s6-system/</id>
    <published>2020-04-24T15:00:00.000Z</published>
    <updated>2020-04-24T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Galaxy S6 发布于2015年，中国大陆公开版是双卡单4G，初始系统版本 5.0。我将其作为备用机多年来一直使用当年自行修改的旧版 6.0 系统，时过境迁现在已兼容性较差。三星已经发布了7.0版本的系统更新，因此试图更新到最新版本的 offical 系统。但中国版系统阉割严重，且有大量中国毒瘤App，无法直接使用。</p><p>尝试 Odin 刷入港版系统，不管是四件套还是一体包，单刷还是全部，均会验证失败。查阅得知该型号虽然港版和中国（内地，下略）版均标示型号为<code>SM-G9200</code>，但港版机型代号为<code>zerofltezh</code>，中国版为<code>zerofltezc</code>，基带不同，港版不支持中国电信网络，因此无法混刷。</p><p>故底包只能采用中国版官方固件。在此基础上刷入 GApps 使手机可用。</p><h2 id="1-刷入完整系统"><a href="#1-刷入完整系统" class="headerlink" title="1. 刷入完整系统"></a>1. 刷入完整系统</h2><p>使用 <a href="https://samfirmtool.com/"><code>SamFirm</code></a> 下载最新版<code>CHC</code>区域固件四件套：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054145843.png" alt="image-20200425054145843"></p><p>使用最新版 <code>Odin</code> 刷入手机，重启，确认正常动作。</p><h2 id="2-刷入-CF-Auto-Root"><a href="#2-刷入-CF-Auto-Root" class="headerlink" title="2. 刷入  CF-Auto-Root"></a>2. 刷入  CF-Auto-Root</h2><p>在 <a href="https://desktop.firmware.mobi/">其网站主页</a> 输入型号G9200后，选择 <code>zerofltezc</code> 版本：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054507054.png" alt="image-20200425054507054"></p><p>点击最新固件，在其下载页面单击 Configure：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054555517.png" alt="image-20200425054555517"></p><p>在配置选项中，<code>Installation type</code> 选择 <code>Systemless Image</code>，<code>Advanced Encryption Options</code> 中 <code>dm-verify</code> 选择 <code>Remove</code> ，其他保持默认，点击 <code>Generate</code> 生成刷机镜像，可能需要排队，且下载速度较慢。</p><p>下载后使用 Odin 在 AP 中刷入手机，重启，确认正常动作。</p><h2 id="3-刷入-Magisk"><a href="#3-刷入-Magisk" class="headerlink" title="3. 刷入 Magisk"></a>3. 刷入 Magisk</h2><p>SuperSU 作者已经弃坑不再更新，当前使用 <a href="https://github.com/topjohnwu/Magisk"><code>Magisk</code></a> 管理SU权限。但我们目前没有安装 custom recovery，故不使用 zip 包直接安装，而采用 patch 系统镜像并用 Odin 刷入的方式安装。</p><ol><li>在 GitHub Release 页面获取最新的 <code>Magisk Manager</code> 并安装。</li><li>使用 <code>7-zip</code> 打开 rom 四件套中的 AP 文件，解压其中 <code>boot.img</code> 并复制到手机中。</li><li>运行 <code>Magisk Manager</code> ，点击安装 Magisk，选择 Patch 镜像，并继续在文件浏览中选择刚才提取的 <code>boot.img</code>。（注：根据官方文档，可以选择 Patch boot 或者 recovery，但测试 recovery 不成功，故此处采用 boot）</li><li>将 patch 过后的 IMG 文件复制回电脑，更名为 <code>boot.img</code>，并使用 <code>7-zip</code> 等压缩软件打包为 tar 格式。</li><li>在 Odin 的 AP 中选中刚才打包的 tar 包，刷入手机。</li><li>重启，进入 <code>Magisk Manager</code> ，选择同意下载安装，再次重启后确认正常动作。</li></ol><h2 id="4-刷入修改版-TWRP-recovery"><a href="#4-刷入修改版-TWRP-recovery" class="headerlink" title="4. 刷入修改版 TWRP recovery"></a>4. 刷入修改版 TWRP recovery</h2><p>TWRP 没有正式提供 G9200 版本的支持。多年前 <a href="https://www.weibo.com/1649111590">Xiao1u</a> 曾提供过修改过的兼容版本 <code>G9200-PC1-TWRP-3.0-PC1-0324.tar</code> ，搜索即可获得，此版本对 7.0 系统的兼容不完美，有可能会导致 bootloop。参考 <a href="https://jtechboard.blogspot.com/2017/09/galaxy-s6-sm-g9200-china-model.html">J Tech board 的解决方案</a>，在确认 <code>dm-verify</code> 已关闭后，使用 Odin 刷入该文件。刷入时取消 Odin 中 Auto Reboot 的勾选。刷完后使用 Vol+ Home Pow 三键进入 recovery，什么都不做直接选择重启到系统，询问是否阻止系统还原 Recovery 时选择忽略。确认依然能正常进入系统。</p><h2 id="5-删除自带的中国-App-和字体等"><a href="#5-删除自带的中国-App-和字体等" class="headerlink" title="5. 删除自带的中国 App 和字体等"></a>5. 删除自带的中国 App 和字体等</h2><p>如果不删除，后面刷入 GApps 可能导致系统空间不足。即使删除后仍要使用，可以事后重新安装到用户空间。</p><p>安装 <a href="https://apkpure.com/jp/system-app-remover-root-needed/com.jumobile.manager.systemapp">System App Remover</a> 查看想要移除的内置应用，长按可以获得该应用的路径。使用 <a href="https://apkpure.com/solid-explorer-file-manager/pl.solidexplorer2">Solid Explorer</a> 定位并删除文件。</p><h2 id="6-刷入-Gapps"><a href="#6-刷入-Gapps" class="headerlink" title="6. 刷入 Gapps"></a>6. 刷入 Gapps</h2><p>在 <a href="https://opengapps.org/">OpenGapps</a> 的主页获得 zip 刷机包，传输至手机，重启至 TWRP 后选择刷入。注意此处如果直接刷入 7.0 系统对应的 nano 或者 pico 包，<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-497997441">会导致系统 WebView 被删除</a>，从而导致 Google 账户无法登录等问题，无法使用。</p><p>解决方案有两个思路，一是安装新的 Chrome WebView 替代被删除的原生 WebView，二是避免原生 WebView 被删除。经测试，即使安装Chrome 也仍然不能恢复该组件正常使用，可能三星对允许使用的 WebView 做了限制，或有其他兼容性问题。避免 WebView 被删除则可以通过<a href="https://github.com/opengapps/opengapps/wiki/Advanced-Features-and-Options">添加配置文件</a> ，或者<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-498086440">添加 package-overlay 重新编译</a> 等方法。这里使用相对比较简单的<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-612578593">修改安装脚本</a>方式完成。</p><p>下载 pico 版本 OpenGApps zip 包后，解压提取 <code>install.sh</code> 文件，搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> List of GApps files that should NOT be automatically removed as they are also included <span class="keyword">in</span> (many) ROMs removal_bypass_list</span></span><br></pre></td></tr></table></figure><p>并在其后的空引号内加入 <code>WebViewGoogle</code>，保存退出，将修改后的文件压入 zip 包，重启手机进入 TWRP 刷入即可。</p><p>刷好后清空缓存，进入系统开发者模式，查看 “实装的 WebView” 选项不为空，即可。推荐重启手机，双清后从向导开始重新初始化系统，避免谷歌系列服务出现授权问题。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>避免购买在中国大陆境内售卖的任何具有中国定制 Rom 的电子产品（包括无线耳机等具有中国区定制 Firmware 的产品），并 7x24 连接<strong>全球互联网</strong>，和全球大多数国家和地区的用户保持类似的软件使用习惯，可以避免绝大多数的烦恼。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Galaxy S6 发布于2015年，中国大陆公开版是双卡单4G，初始系统版本 5.0。我将其作为备用机多年来一直使用当年自行修改的旧版 6.0 系统，时过境迁现在已兼容性较差。三星已经发布了7.0版本的系统更新，因此试图更新到最新版本的 offical 系统。但中国版系统</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="Android" scheme="https://www.coder17.com/tags/Android/"/>
    
    <category term="Galaxy S6" scheme="https://www.coder17.com/tags/Galaxy-S6/"/>
    
    <category term="SM-G9200" scheme="https://www.coder17.com/tags/SM-G9200/"/>
    
    <category term="刷机" scheme="https://www.coder17.com/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 硬盘不休眠解决</title>
    <link href="https://www.coder17.com/posts/qnap-hdd-wont-sleep/"/>
    <id>https://www.coder17.com/posts/qnap-hdd-wont-sleep/</id>
    <published>2020-03-18T23:33:00.000Z</published>
    <updated>2020-03-18T23:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-系统-raid-结构"><a href="#0-系统-raid-结构" class="headerlink" title="0. 系统 raid 结构"></a>0. 系统 raid 结构</h2><p>使用 <code>cat /proc/mdstat</code> 可以查看所有 raid 卷。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Personalities</span> :<span class="meta"> [linear] [raid0] [raid1] [raid10] [raid6] [raid5] [raid4] [multipath]</span></span><br><span class="line"><span class="attribute">md3</span> : active raid<span class="number">1</span> sdc<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">3897063616</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md2</span> : active raid<span class="number">1</span> sda<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">7804071616</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md1</span> : active raid<span class="number">1</span> sdb<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">392120832</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md322</span> : active raid<span class="number">1</span> sda<span class="number">5</span>[<span class="number">1</span>] sdc<span class="number">5</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">7235136</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/2] [UU]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md256 : active raid1 sda2[1] sdc2[0]</span></span><br><span class="line">      <span class="attribute">530112</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/2] [UU]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md321 : active raid1 sdb5[0]</span></span><br><span class="line">      <span class="attribute">8283712</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/1] [U_]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md13 : active raid1 sda4[0] sdc4[33] sdb4[32]</span></span><br><span class="line">      <span class="attribute">458880</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [32/3] [UUU_____________________________]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">1</span>/<span class="number">1</span> pages<span class="meta"> [4KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md9 : active raid1 sda1[0] sdc1[33] sdb1[32]</span></span><br><span class="line">      <span class="attribute">530048</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [32/3] [UUU_____________________________]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">1</span>/<span class="number">1</span> pages<span class="meta"> [4KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">unused devices: &lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>注意到 md9 md13 md322 md256 均是横跨了机械硬盘的 raid 卷。搜索后得知 md9 和 md13 是系统自动创建的跨所有硬盘的 raid1 数据卷，存储系统配置和目录等。md322 和 md256 是系统 swap 分区。</p><h2 id="1-系统分区-raid-反复读取"><a href="#1-系统分区-raid-反复读取" class="headerlink" title="1. 系统分区 raid 反复读取"></a>1. 系统分区 raid 反复读取</h2><p>使用 <a href="https://drive.google.com/file/d/0B8u8qWRYVhv0S1ozWFRjazFEX1E/view">blkdevMonitor.sh</a> 脚本查看硬盘读写，可以看到大量 md9 相关读取。因此首先处理 md9 和 md13。</p><p>使用 <code>parted /dev/sdb print</code> 命令查看各硬盘，通过容量判断 sdb 是 SSD，sda 和 sdc 是两块机械硬盘。因此将 SSD 以外的硬盘从阵列中踢出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disconnecting md9&quot;</span></span><br><span class="line">mdadm /dev/md9 --fail /dev/sda1</span><br><span class="line">mdadm /dev/md9 --fail /dev/sdc1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disconnecting md13&quot;</span></span><br><span class="line">mdadm /dev/md13 --fail /dev/sda4</span><br><span class="line">mdadm /dev/md13 --fail /dev/sdc4</span><br></pre></td></tr></table></figure><p>使用 <code>mdadm -D /dev/md9</code> 验证移除是否成功</p><p>然后使用 <code>hdparm -y /dev/sda</code> 立即休眠硬盘，并使用 <code>hdparm -C /dev/sda</code>查看硬盘状态，<code>active/idle</code> 或者 <code>standby</code></p><p>但断开连接时万一系统盘损坏，则系统数据会丢失，因此每天同步一次。使用下列脚本恢复连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Re-adding md9&quot;</span></span><br><span class="line">mdadm /dev/md9 --re-add /dev/sda1</span><br><span class="line">mdadm /dev/md9 --re-add /dev/sdc1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Re-adding md13&quot;</span></span><br><span class="line">mdadm /dev/md13 --re-add /dev/sda4</span><br><span class="line">mdadm /dev/md13 --re-add /dev/sdc4</span><br></pre></td></tr></table></figure><p>保存上述两个脚本后（记得添加 x 权限），使用 crontab 每天运行一次，加回去15分钟后断开连接，应足够其完成同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> 15 0 \* \* \* /share/homes/Tojo/rebuild_internal_raid.sh &gt;&gt; /etc/config/crontab</span><br><span class="line">sudo <span class="built_in">echo</span> 30 0 \* \* \* /share/homes/Tojo/disconnect_internal_raid.sh &gt;&gt; /etc/config/crontab</span><br><span class="line">sudo crontab /etc/config/crontab &amp;&amp; sudo /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>并修改启动脚本使其自动生效。</p><h2 id="2-swap-分区"><a href="#2-swap-分区" class="headerlink" title="2. swap 分区"></a>2. swap 分区</h2><p>使用 <code>cat /proc/swaps</code> 查看系统 swap 分区，发现很诡异地两个 swap 都建立在机械硬盘上。</p><p>但目前看起来不是很影响休眠，就先不管他了。</p><p>参考：</p><p><a href="https://forum.qnap.com/viewtopic.php?f=55&t=130788">Advanced guide to how I completely silenced my TS-453A - QNAP NAS Community Forum</a></p><p><a href="https://forum.qnap.com/viewtopic.php?t=114286">md clarification please_ - QNAP NAS Community Forum</a></p><p><a href="https://wiki.qnap.com/wiki/Find_out_which_process_prevents_the_hard_drives_from_spindown">Find out which process prevents the hard drives from spindown - QNAPedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-系统-raid-结构&quot;&gt;&lt;a href=&quot;#0-系统-raid-结构&quot; class=&quot;headerlink&quot; title=&quot;0. 系统 raid 结构&quot;&gt;&lt;/a&gt;0. 系统 raid 结构&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;cat /proc/mdstat&lt;/c</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="硬盘" scheme="https://www.coder17.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
    <category term="休眠" scheme="https://www.coder17.com/tags/%E4%BC%91%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 添加定时任务</title>
    <link href="https://www.coder17.com/posts/qnap-crontab/"/>
    <id>https://www.coder17.com/posts/qnap-crontab/</id>
    <published>2020-03-18T23:31:00.000Z</published>
    <updated>2020-03-18T23:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/config/crontab</span><br><span class="line">sudo crontab -l</span><br><span class="line">crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>记得把要运行的命令属性 +x</p><p>参考：</p><p><a href="https://wiki.qnap.com/wiki/Add_items_to_crontab">Add items to crontab</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="crontab" scheme="https://www.coder17.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 修改 sudoers</title>
    <link href="https://www.coder17.com/posts/qnap-mod-sudoers/"/>
    <id>https://www.coder17.com/posts/qnap-mod-sudoers/</id>
    <published>2020-03-15T19:50:00.000Z</published>
    <updated>2020-03-15T19:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>威联通 NAS 默认 sudoers 仅包括内置 admin 账户，修改时需要编辑 <code>/usr/etc/sudoers</code> 文件。</p><p>但 <code>/usr/etc</code> 目录中的编辑在重启后均会复原。因此需要在<code>系统设置-&gt;硬件</code>中打开允许 <code>autorun.sh</code> 运行选项，并且编辑该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">vim /tmp/config/autorun.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mkdir -p /usr/etc/sudoers.d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Tojo ALL=(ALL) ALL&quot;</span> &gt; /usr/etc/sudoers.d/Tojo</span><br></pre></td></tr></table></figure><p>如此即可在重启后自动修改 sudoers。如果直接向 <code>/usr/etc/sudoers</code> 末尾写入配置的话，由于该配置文件最后一行为 include 命令，因此会导致在此之后写入的配置无法生效。因此选择向其加载的配置目录中写入新文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;威联通 NAS 默认 sudoers 仅包括内置 admin 账户，修改时需要编辑 &lt;code&gt;/usr/etc/sudoers&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;但 &lt;code&gt;/usr/etc&lt;/code&gt; 目录中的编辑在重启后均会复原。因此需要在&lt;code&gt;系统设置</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="sudoers" scheme="https://www.coder17.com/tags/sudoers/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 添加启动项</title>
    <link href="https://www.coder17.com/posts/qnap-startup/"/>
    <id>https://www.coder17.com/posts/qnap-startup/</id>
    <published>2020-03-12T18:04:00.000Z</published>
    <updated>2020-03-12T18:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>系统设置-&gt;硬件</code>中打开允许 <code>autorun.sh</code> 运行选项，并且编辑该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">or sudo mount $(sudo /sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">vim /tmp/config/autorun.sh</span><br></pre></td></tr></table></figure><p>必须添加 shebang，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://wiki.qnap.com/wiki/Running_Your_Own_Application_at_Startup">Running Your Own Application at Startup</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在&lt;code&gt;系统设置-&amp;gt;硬件&lt;/code&gt;中打开允许 &lt;code&gt;autorun.sh&lt;/code&gt; 运行选项，并且编辑该文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="启动项" scheme="https://www.coder17.com/tags/%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    
    <category term="autorun" scheme="https://www.coder17.com/tags/autorun/"/>
    
  </entry>
  
  <entry>
    <title>下载 m3u8 推流</title>
    <link href="https://www.coder17.com/posts/m3u8-stream-download/"/>
    <id>https://www.coder17.com/posts/m3u8-stream-download/</id>
    <published>2020-02-21T11:48:00.000Z</published>
    <updated>2020-02-21T11:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在浏览器 Network 中查找 m3u8</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221204910267.png" alt="image-20210221204910267"></p></li><li><p>如果是上图所示嵌套，逐级打开对应 m3u8 文件，直到出现 ts 文件列表和密钥</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221205009425.png" alt="image-20210221205009425"></p></li><li><p>如果要先下载再合并，则观察 ts 文件 url 规律，使用 curl 批量下载文件</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://what-ever-[<span class="number">1</span>-<span class="number">999</span>].ts</span><br></pre></td></tr></table></figure></li><li><p>将 m3u8 文件下载到同一目录，并替换删除其中 url 前缀</p></li><li><p>按照 URI 参数值下载 m3u8 文件中的密钥 key 文件，应为16字节长度。同时改写 m3u8 文件中 key 路径使其指向此文件</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221205501863.png" alt="image-20210221205501863"></p></li><li><p>使用 ffmpeg 批量解密合并 ts 文件即可获得 mp4 视频</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -loglevel error -allowed_extensions ALL -i prog-index.m3u8 -c <span class="built_in">copy</span> &quot;output.mkv&quot;</span><br></pre></td></tr></table></figure></li><li><p>如果要直接下载，则不需要下载 ts 文件，直接用 ffmpeg 解密 m3u8 文件</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -loglevel error -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i prog-index.m3u8 -c <span class="built_in">copy</span> &quot;output.mkv&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在浏览器 Network 中查找 m3u8&lt;/p&gt;
&lt;p&gt; &lt;img src= &quot;/images/loading.gif&quot; data-lazy-src=&quot;/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="m3u8" scheme="https://www.coder17.com/tags/m3u8/"/>
    
    <category term="推流" scheme="https://www.coder17.com/tags/%E6%8E%A8%E6%B5%81/"/>
    
    <category term="下载" scheme="https://www.coder17.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu VPS 上引导 iso 安装纯净系统</title>
    <link href="https://www.coder17.com/posts/vps-boot-from-iso/"/>
    <id>https://www.coder17.com/posts/vps-boot-from-iso/</id>
    <published>2019-09-19T15:00:00.000Z</published>
    <updated>2019-09-19T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>租用 VPS 厂商的机器时，一般只能预装厂商原有的镜像。有时镜像并不纯净，厂商会在里面加料。因此需要安装原版系统。下面以腾讯云重新安装 Ubuntu 18.04 LTS 为例。</p><h2 id="1-检测系统环境"><a href="#1-检测系统环境" class="headerlink" title="1. 检测系统环境"></a>1. 检测系统环境</h2><h3 id="1-1-确定系统有-grub"><a href="#1-1-确定系统有-grub" class="headerlink" title="1.1 确定系统有 grub"></a>1.1 确定系统有 grub</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="1-2-确认分区布局"><a href="#1-2-确认分区布局" class="headerlink" title="1.2 确认分区布局"></a>1.2 确认分区布局</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看 <code>/</code>  和 <code>/boot</code> 目录是否在不同分区。如果仅有根目录，处理较为容易，否则在后续步骤中需要注意。</p><h2 id="2-下载系统镜像"><a href="#2-下载系统镜像" class="headerlink" title="2. 下载系统镜像"></a>2. 下载系统镜像</h2><p>注意：Ubuntu 如果使用常规 iso，安装会报错，因此使用网络安装版（Network installer）的iso。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /boot/isoboot.iso http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso</span><br></pre></td></tr></table></figure><h2 id="3-准备-Memdisk"><a href="#3-准备-Memdisk" class="headerlink" title="3. 准备 Memdisk"></a>3. 准备 Memdisk</h2><p>原理是将 iso 镜像读入内存。使用 apt 安装 Syslinux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install syslinux -y</span><br></pre></td></tr></table></figure><p>复制 memdisk 文件到引导目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -f /usr/lib/syslinux/memdisk /boot/memdisk</span><br></pre></td></tr></table></figure><h2 id="4-修改-Grub-引导"><a href="#4-修改-Grub-引导" class="headerlink" title="4. 修改 Grub 引导"></a>4. 修改 Grub 引导</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/grub.d/41_custom</span><br></pre></td></tr></table></figure><p>插入以下内容到 EOF 之前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">menuentry &#x27;OS Web Install&#x27; &#123;</span><br><span class="line">    insmod part_msdos</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod ext2</span><br><span class="line">    set root=(hd0,msdos1)</span><br><span class="line">    echo &#x27;Loading memdisk ...&#x27;</span><br><span class="line">    linux16 /boot/memdisk raw iso</span><br><span class="line">    echo &#x27;Loading ISO ...&#x27;</span><br><span class="line">    initrd16 /boot/isoboot.iso</span><br><span class="line">    echo &#x27;Booting ISO ...&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，此处根据刚才分析分区布局时候的结果而有所不同：</p><blockquote><ul><li>如果你的服务器是单块硬盘，而且只有一个分区，那么root的值为 <strong>(hd0,msdos1)</strong></li><li>如果你的服务器的单块硬盘，存在不止一个分区，看 /boot 分区在哪个盘上，比如在 /dev/vda5 上，那就是 <strong>(hd0,msdos5)</strong></li><li>其他更复杂的情况，重启服务器，到达 Grub 界面时按下 <strong>C</strong> 键，进入 Grub 命令行，并按照以下步骤操作：</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls</span></span><br><span class="line">(hd0) (hd0,msdos1) (hd0,msdos5)</span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls (hd0,msdos1)/</span></span><br><span class="line">error: unknown filesystem. # 说明这个分区不是正确的启动分区，继续尝试</span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls (hd0,msdos5)/</span></span><br><span class="line">lost+found/ etc/ (各种文件夹) # 说明这个分区是正确的启动分区</span><br><span class="line"></span><br><span class="line">reboot #回到系统</span><br></pre></td></tr></table></figure><p>修改 <code>/etc/default/grub</code> 配置文件增大 <code>GRUB_TIMEOUT</code> 超时时间，然后更新 Grub 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>之后确认是否正确写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="5-备份配置"><a href="#5-备份配置" class="headerlink" title="5. 备份配置"></a>5. 备份配置</h2><p>备份网络配置等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure><h2 id="6-重装"><a href="#6-重装" class="headerlink" title="6. 重装"></a>6. 重装</h2><p>重启，使用 VNC 连接，启动时选择 <strong>OS Web Install</strong> 并操作重装。</p><p>因为使用的是最小镜像，需要联网下载大量安装包，过程可能比较漫长，耐心等待即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%9C%A8%20Ubuntu%20%E4%B8%8A%E5%BC%95%E5%AF%BC%20iso/image-20210421212105375.png" alt="image-20210421212105375"></p><hr><p>参考：</p><p><a href="https://blog.ilemonrain.com/linux/grub-memdisk-boot-iso.html">https://blog.ilemonrain.com/linux/grub-memdisk-boot-iso.html</a></p><p><a href="https://www.imbeee.com/2017/12/10/install-pure-system-on-vps-and-encrypt-it/">https://www.imbeee.com/2017/12/10/install-pure-system-on-vps-and-encrypt-it/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;租用 VPS 厂商的机器时，一般只能预装厂商原有的镜像。有时镜像并不纯净，厂商会在里面加料。因此需要安装原版系统。下面以腾讯云重新安装 Ubuntu 18.04 LTS 为例。&lt;/p&gt;
&lt;h2 id=&quot;1-检测系统环境&quot;&gt;&lt;a href=&quot;#1-检测系统环境&quot; class=</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="VPS" scheme="https://www.coder17.com/tags/VPS/"/>
    
    <category term="Ubuntu" scheme="https://www.coder17.com/tags/Ubuntu/"/>
    
    <category term="腾讯云" scheme="https://www.coder17.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    <category term="引导 iso" scheme="https://www.coder17.com/tags/%E5%BC%95%E5%AF%BC-iso/"/>
    
  </entry>
  
  <entry>
    <title>不装 VS Windows Terminal 编译 msxi 自签名安装</title>
    <link href="https://www.coder17.com/posts/msxi-sign-install/"/>
    <id>https://www.coder17.com/posts/msxi-sign-install/</id>
    <published>2019-06-15T15:00:00.000Z</published>
    <updated>2019-06-15T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Terminal 一直没有发布可以直接安装的二进制文件，想自行编译的时候，看到系统需求中包含体积巨大的 Visual Studio 和 Windows SDK，脑袋都大了。直接下载其他人编译好的安装包又不放心，那么就想个办法避免在本地环境编译吧。</p><h2 id="1-编译结果获取"><a href="#1-编译结果获取" class="headerlink" title="1. 编译结果获取"></a>1. 编译结果获取</h2><p>首先想到 Azure DevOps，这个可以简单理解成微软提供的在线 CI 平台，写好编译文件就可以调用微软的自带所有编译环境的镜像直接在线编译，并生成二进制下载。这个服务可以使用 edu 教育账号免费使用，有 edu 邮箱的都可以用。我曾经使用这个编译过其他人久不更新的 MFC 项目。自己写一个 ，或者修改微软生成的 <code>azure-pipelines.yml</code> 即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678181063.png" alt="1560678181063"></p><p>那么就从 GitHub 上把微软的代码拿过来，再写个 pipeline 直接编译吧。这时注意到，GitHub 上的项目中，居然已经包含了写好的 pipeline。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678325392.png" alt="1560678325392"></p><p>想了想也是自然，微软写的东西当然自己也会用 Azure DevOps 啊。</p><p>接下来注意到，在 GitHub 仓库的 Readme 中，已经有 Azure Pipelines 的编译结果图标了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678474529.png" alt="1560678474529"></p><p>单击图标，打开软的 DevOps 仓库，可见每次 push 代码都是会自动编译的。进一步分析发现，只有合并到 master 分支时会编译出二进制文件。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678578167.png" alt="1560678578167"></p><p>那么我们选择其中一个 master 分支的 CI job：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678636549.png" alt="1560678636549"></p><p>可以看到，右上角有 Artifacts 按钮，说明这个 CI 是会上传编译出来的二进制文件到服务器的。不清楚这三个有什么区别，我起初以为分别对应 x64、x86 和 arm64 的编译结果，但我下载第一个压缩包中，是包含了三个平台的编译结果的。压缩包很大，150多M，内容如下：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678772276.png" alt="1560678772276"></p><p>其中的 <code>CascadiaPackage_0.0.1.0_x64.msix</code> 就是我们要的二进制安装包。</p><h2 id="2-安装尝试"><a href="#2-安装尝试" class="headerlink" title="2. 安装尝试"></a>2. 安装尝试</h2><p>首先把系统调成开发者模式。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678844942.png" alt="1560678844942"></p><p>然后双击 msix 文件直接安装，发现安装失败，提示安装包没有签名。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679034249.png" alt="1560679034249"></p><p>一番搜索之后，发现如果使用 VS 在本机直接部署，VS 会自动帮你签名。如果使用 VS 命令行工具直接编译出来的结果，是没有签名的。</p><p>在 GitHub 仓库的一个 <a href="https://github.com/microsoft/Terminal/issues/489#issuecomment-496170540">issue</a> 中有人提到，需要用 <code>SignTool.exe</code> 来为这个安装包签名。</p><h2 id="3-证书生成"><a href="#3-证书生成" class="headerlink" title="3. 证书生成"></a>3. 证书生成</h2><p>签名首先需要一个证书。在这里我们直接自签发一个证书并添加信任就行了。参考刚才的 issue 中提到的脚本，打开管理员权限的 Power Shell ，并 cd 到 msix 安装包所在目录中，执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-SelfSignedCertificate</span> <span class="literal">-Type</span> Custom <span class="literal">-Subject</span> <span class="string">&quot;CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span> <span class="literal">-KeyUsage</span> DigitalSignature <span class="literal">-FriendlyName</span> <span class="string">&quot;WindowsTerminal&quot;</span> <span class="literal">-CertStoreLocation</span> <span class="string">&quot;Cert:\LocalMachine\My&quot;</span> <span class="literal">-TextExtension</span> <span class="selector-tag">@</span>(<span class="string">&quot;2.5.29.37=&#123;text&#125;1.3.6.1.5.5.7.3.3&quot;</span>, <span class="string">&quot;2.5.29.19=&#123;text&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时会显示一个证书指纹，复制其中指纹并替换掉下面命令中的 <code>C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF</code>，同时修改命令中的密码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="literal">-String</span> <span class="string">&quot;随便设置一个密码&quot;</span> <span class="literal">-Force</span> <span class="literal">-AsPlainText</span></span><br><span class="line"><span class="built_in">Export-PfxCertificate</span> <span class="literal">-cert</span> <span class="string">&quot;Cert:\LocalMachine\My\C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF&quot;</span> <span class="literal">-FilePath</span> WindowsTerminal.pfx <span class="literal">-Password</span> <span class="variable">$password</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Path</span> <span class="string">&quot;Cert:\LocalMachine\My\C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF&quot;</span></span><br></pre></td></tr></table></figure><p>此时当前目录会生成一个 <code>WindowsTerminal.pfx</code> 证书。双击之，安装到计算机存储的受信任人（Trusted People）目录中，中间会要你输入刚才脚本里设置的密码。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679602449.png" alt="1560679602449"></p><p>好了，证书搞定了。</p><h2 id="4-提取安装签名工具"><a href="#4-提取安装签名工具" class="headerlink" title="4. 提取安装签名工具"></a>4. 提取安装签名工具</h2><p>下面使用  <code>SignTool.exe</code> 工具进行签名。这个工具是 <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk">Windows 10 SDK</a> 中的一个工具。去微软网站查看发现，这货体积巨大，包含了许多开发 Windows 所需的工具包。但我们并不需要其他的部分，所以这里投机取巧一下，只安装所需的部分。</p><p>首先要下载 ISO 格式的安装镜像，不要直接下 Installer。大概 800M 左右，半夜直连下载速度飞快，白天就不行了，视情况使用更加科学的上网方式。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679726239.png" alt="1560679726239"></p><p>下好之后，使用 Windows 自带的 Mount 功能映射为虚拟光驱。打开 <code>Installers</code> 目录，找到 <code>Windows App Certification Kit x64-x86_en-us.msi</code> 这个包，双击安装。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679991475.png" alt="1560679991475"></p><p>这个工具包就包含了我们需要的 <code>SignTools.exe</code> ，其他的部分不需要，可以删掉这个镜像了。在 <code>C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe</code> 路径可以找到我们需要的工具。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560680492261.png" alt="1560680492261"></p><h2 id="5-签名安装"><a href="#5-签名安装" class="headerlink" title="5. 签名安装"></a>5. 签名安装</h2><p>在 msix 和证书文件所在目录打开 cmd，执行以下命令完成签名：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Windows Kits\<span class="number">10</span>\App Certification Kit\signtool.exe&quot; sign /fd SHA256 /a  /f WindowsTerminal.pfx /p 你的密码 CascadiaPackage_0.<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span>_x64.msix</span><br></pre></td></tr></table></figure><p>签好后再双击 msix 包，就可以顺利安装了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560680665789.png" alt="1560680665789"></p><p>Enjoy！</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560681595443.png" alt="1560681595443"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows Terminal 一直没有发布可以直接安装的二进制文件，想自行编译的时候，看到系统需求中包含体积巨大的 Visual Studio 和 Windows SDK，脑袋都大了。直接下载其他人编译好的安装包又不放心，那么就想个办法避免在本地环境编译吧。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="Windows Terminal" scheme="https://www.coder17.com/tags/Windows-Terminal/"/>
    
    <category term="DevOps" scheme="https://www.coder17.com/tags/DevOps/"/>
    
    <category term="msxi" scheme="https://www.coder17.com/tags/msxi/"/>
    
    <category term="自签名" scheme="https://www.coder17.com/tags/%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
    
    <category term="编译" scheme="https://www.coder17.com/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="SignTools" scheme="https://www.coder17.com/tags/SignTools/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 商店应用无法启动解决</title>
    <link href="https://www.coder17.com/posts/uwp-crash/"/>
    <id>https://www.coder17.com/posts/uwp-crash/</id>
    <published>2018-12-10T15:00:00.000Z</published>
    <updated>2018-12-10T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bug 10 的桌面版商店应用全崩了，提示没有权限啥啥啥，脑壳疼。<br>今天发现截图软件崩了，试图重启的时候弹出一个框告诉我访问啥啥没权限。  </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/a15862ae.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-40-49.png"></p><p>哦擦这是什么鬼呢。</p><p>顺着提示找到路径 <code>C:\Users\&lt;username&gt;\AppData\Local\Microsoft\WindowsApps</code>，发现是放置所有从 Windows Store 安装的桌面应用的地方。注意是桌面应用而不是 UWP 应用。<br>进到目录里看到所有的 exe 都是 0KB 没有图标的，双击后弹出一样的错误框。查看整个 WindowsApps 目录发现是没有大小的。 </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/a0ce7d67.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-43-09.png"></p><p>起初以为是目录文件损坏，找出了一周前的系统备份镜像发现备份中的这个目录也是一样的 0KB。这就比较棘手了。 </p><p>尝试启动了一下 WSL 的那个 Ubuntu 图标，发现也报一样的错误。搜索后发现 Github 上<a href="https://github.com/Microsoft/WSL/issues/2323">有一个 issue</a> 在研究这个问题。<br>看了看其中的解决方式，重置 Windows Store 什么的都不好使。<br>尝试右键管理员运行，依然报错。但注意到选择管理员运行后先弹出了 UAC 提权框，其中的程序图标是正常显示的。于是怀疑并不是这个 exe 本身有权限问题，而是 exe 运行后访问的某个资源有权限问题。<br>在 Github 的那个 issue 中看到<a href="https://github.com/Microsoft/WSL/issues/2323#issuecomment-412823470">有人建议</a>使用 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon">Process Monitor</a> 检测一下到底是什么权限问题。 </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/754e95d7.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-53-13.png"></p><p>于是使用 Procmon 抓取启动后的 <code>ACCESS DENIED</code> 记录：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/f958d8d3.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-53-29.png"></p><p>看到三条注册表访问和一条文件访问，从路径看那条文件访问的嫌疑很大。于是查看该路径 <code>C:\Users\&lt;username&gt;\AppData\Local\Packages</code> 的权限：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/db6e5d86.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-54-45.png"></p><p>发现只有自己，感觉不太对，又在任务管理器中查看了 PID 10148 的那个 svchost 进程，发现用户名是 SYSTEM。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/4190a952.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-55-52.png"></p><p>那么问题应该很明显了，这个宿主进程没有权限访问存储了 Windows 商店应用数据的目录。</p><p>为了确认问题，找了另一个机器查看对应目录的权限，发现应该除了当前用户之外，还有 SYSTEM 用户和 Administrators 用户组的完全访问权限。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3/be890d1d.png" alt="Windows 10 商店应用无法启动解决_2018-12-11-18-57-14.png"></p><p>于是给对应目录添加了这两组权限，再试，还报错。重新抓取动作后发现这次是 <code>C:\Users\&lt;username&gt;\AppData\Local\Microsoft</code> 目录又没权限访问。重复上述步骤添加权限后，顺利启动。问题解决。</p><p>虽然不知道是什么原因导致权限丢失，不过十有八九是 Bug 10 的某个补丁包干的好事。吔屎啦微软。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Bug 10 的桌面版商店应用全崩了，提示没有权限啥啥啥，脑壳疼。&lt;br&gt;今天发现截图软件崩了，试图重启的时候弹出一个框告诉我访问啥啥没权限。  &lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/images/loading.gif&quot; data-lazy-src=&quot;/blogimg/</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="Windows 10" scheme="https://www.coder17.com/tags/Windows-10/"/>
    
    <category term="Windows" scheme="https://www.coder17.com/tags/Windows/"/>
    
    <category term="UWP" scheme="https://www.coder17.com/tags/UWP/"/>
    
    <category term="Store" scheme="https://www.coder17.com/tags/Store/"/>
    
  </entry>
  
  <entry>
    <title>解决（小米）笔记本插电时升频太快导致过热</title>
    <link href="https://www.coder17.com/posts/cpu-overheat/"/>
    <id>https://www.coder17.com/posts/cpu-overheat/</id>
    <published>2018-09-16T15:00:00.000Z</published>
    <updated>2018-09-16T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>买了这个带指纹的小米十三寸之后，别的什么都好，就是一插交流电，CPU 温度就噌噌噌上来了，风扇也跟着起飞。不插电源用电池的时候就很安静。<br>查了好多资料，包括一些买了小米的忧伤老外写的东西，建议无非是四个：</p><ol><li>装 XTU 调核心电压；</li><li>装 <a href="https://github.com/hirschmann/nbfc">Notebook Fan Control</a> 调风扇转速；</li><li>刷 BIOS 玄学降温；</li><li>在电源策略里限制 CPU 最大频率为 99%。</li></ol><p>首先 Inten XTU 是不好使的，新版 BIOS 早就封死调电压的入口了。而且其实也不是 CPU 电压的问题，而是 Windows 的电源策略太激进。我曾经刷回旧版 BIOS 调低了 CPU 核心电压，几乎没有效果。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/113ba839.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-52-29.png"></p><p>然后装风扇转速控制我也试过，治标不治本，小米这个风扇是有点过于主动，但如果调低转速机器就会非常烫，不是问题的根源。</p><p>刷 BIOS 我试过网上传出的两个版本，又去小米售后专门刷了最新版：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/2e16dc31.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-52-56.png"></p><p>不负责任地讲一句，没卵用。  </p><p>限制 CPU 频率的办法确实好用，但这是以牺牲性能为代价的，调到99%之后禁用了睿频，那我花那么多钱买这 i7 有何用？  </p><p>研究好久终于发现问题的根源是 Windows 的电源策略。<br>相关控制参数在电源方案里设置，但默认隐藏。<br>通过修改注册表可以显示，但相当麻烦。<br>参考：<br><a href="http://forum.notebookreview.com/threads/guide-power-options-power-plans-show-all-hidden-settings.767612/">http://forum.notebookreview.com/threads/guide-power-options-power-plans-show-all-hidden-settings.767612/</a><br><a href="https://docs.google.com/spreadsheets/d/17XBNNdMdX-Bkt1kb8dJW3FP4br0VL7G94tdFBo8SW48/edit?pli=1#gid=870536397">https://docs.google.com/spreadsheets/d/17XBNNdMdX-Bkt1kb8dJW3FP4br0VL7G94tdFBo8SW48/edit?pli=1#gid=870536397</a></p><p>因此使用小软件 <a href="https://bitsum.com/parkcontrol/">ParkControl</a> 解决：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/5e693df5.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-54-41.png"></p><p>安装后勾上这个就可以卸载了。（其实这个小软件本来的功能是解锁 CPU 停车设置，让 CPU 工作得更猛烈一些的）<br>然后在电源计划里修改相关的值：  </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/9da959ad.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-54-58.png"></p><p>搞成和电池状态差不多就行了，尤其是第一个升频阈值，默认是60%，一不小心就升频了。<br>保存之后重启（可能不重启也行），妈妈再也不担心我插电的时候风扇上天了。</p><p>神他妈爱抖露，偶像CPU。  </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/90487196.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-55-28.png"></p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%A7%A3%E5%86%B3%EF%BC%88%E5%B0%8F%E7%B1%B3%EF%BC%89%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E7%94%B5%E6%97%B6%E5%8D%87%E9%A2%91%E5%A4%AA%E5%BF%AB%E5%AF%BC%E8%87%B4%E8%BF%87%E7%83%AD/85fcc598.png" alt="解决（小米）笔记本插电时升频太快导致过热_2018-11-22-03-55-37.png"></p><p><a href="https://weibo.com/6174652641/GzCzRpTkM">https://weibo.com/6174652641/GzCzRpTkM</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;买了这个带指纹的小米十三寸之后，别的什么都好，就是一插交流电，CPU 温度就噌噌噌上来了，风扇也跟着起飞。不插电源用电池的时候就很安静。&lt;br&gt;查了好多资料，包括一些买了小米的忧伤老外写的东西，建议无非是四个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;装 XTU 调核心电压；&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="Windows" scheme="https://www.coder17.com/tags/Windows/"/>
    
    <category term="BIOS" scheme="https://www.coder17.com/tags/BIOS/"/>
    
    <category term="笔记本" scheme="https://www.coder17.com/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    <category term="散热" scheme="https://www.coder17.com/tags/%E6%95%A3%E7%83%AD/"/>
    
    <category term="小米" scheme="https://www.coder17.com/tags/%E5%B0%8F%E7%B1%B3/"/>
    
  </entry>
  
  <entry>
    <title>禁止 Windows 10 更新后自动重启</title>
    <link href="https://www.coder17.com/posts/windows-update-restart/"/>
    <id>https://www.coder17.com/posts/windows-update-restart/</id>
    <published>2018-09-13T15:00:00.000Z</published>
    <updated>2018-09-13T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚上微软又分发更新并且强制重启了，我四台电脑只幸存了一台，其他上面开的虚拟机和工作环境啥的都没了。</p><p>很生气，研究了一下为啥幸存了一台，发现一年前我就给它动过手脚，当时我打着游戏呢就重启了。查阅了一下自己当时的记录，复现了一下，分享给大家。</p><p>设置组策略什么的都不好用，早晚还是要被微软强奸。<br>排查后发现重启是由任务计划中：</p><p><code>\Microsoft\Windows\UpdateOrchestrator</code></p><p>这个任务触发的，查看其上次启动时间就可以看到 Windows 的重启时间：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/5e4ff6f6.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-10-44.png"></p><p>但这个任务是系统用户创建的，我们自己没有权限搞死它。<br>研究一下任务干了什么：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/71dd76f9.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-11-33.png"></p><p>看到是执行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%systemroot%\system32\MusNotification.exe</span><br></pre></td></tr></table></figure><p>这个程序来重启。进到系统目录下看看这个文件：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/e985485d.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-11-46.png"></p><p>发现其实是一个硬链接。而且这个程序即使删除或修改，在下次更新后也会自动恢复。我们只想禁止自动更新后的重启，并不是不更新。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/e4e15ead.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-44-14.png"></p><p>所以只能用 IFEO 映像劫持了：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/6adb1ad4.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-44-46.png"></p><p>路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options</span><br></pre></td></tr></table></figure><p>新建一个 Key，改名 <code>MusNotification.exe</code>：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/8d4ed555.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-45-24.png"></p><p>在右边新建字符串值，命名 <code>debugger</code>，值 <code>cscript.exe</code>（图中错误）。这个程序不带参数是啥也不会做的。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%A6%81%E6%AD%A2%20Windows%2010%20%E6%9B%B4%E6%96%B0%E5%90%8E%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/37d84338.png" alt="禁止 Windows 10 更新后自动重启_2018-11-22-03-45-53.png"></p><p>重启一下，然后就再也不会重启了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨晚上微软又分发更新并且强制重启了，我四台电脑只幸存了一台，其他上面开的虚拟机和工作环境啥的都没了。&lt;/p&gt;
&lt;p&gt;很生气，研究了一下为啥幸存了一台，发现一年前我就给它动过手脚，当时我打着游戏呢就重启了。查阅了一下自己当时的记录，复现了一下，分享给大家。&lt;/p&gt;
&lt;p&gt;设置</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://www.coder17.com/tags/Windows/"/>
    
    <category term="自动更新" scheme="https://www.coder17.com/tags/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    
    <category term="重启" scheme="https://www.coder17.com/tags/%E9%87%8D%E5%90%AF/"/>
    
  </entry>
  
  <entry>
    <title>Switch 游戏加速透明代理的改进部署</title>
    <link href="https://www.coder17.com/posts/trans-proxy-splatton2-mod/"/>
    <id>https://www.coder17.com/posts/trans-proxy-splatton2-mod/</id>
    <published>2018-08-11T15:00:00.000Z</published>
    <updated>2018-08-11T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章（<a href="/posts/trans-proxy-splatoon2/">搭建透明代理加速 Splatoon2 游戏手记</a>）中，关于部署方式我提到，由于无线网卡的不兼容，开虚拟机的宿主机必须以有线方式接入路由设备。</p><p>我当时选择的是把宿主机笔记本直接放在客厅路由器旁边当服务器用。现在看来这种操作太粗鲁了。因此这里介绍一种更优雅的部署方式。</p><h2 id="1-电力猫"><a href="#1-电力猫" class="headerlink" title="1. 电力猫"></a>1. 电力猫</h2><p>首先我把电脑搬回了卧室，然后试图使用电力猫来有线连接到客厅的路由器。<br>我以前使用的是下面这个腾达的千兆电力猫：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/25a45432.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-15-21.png"></p><p>这玩意儿是一对，一个用网线插到路由器上，再插到路由器旁边的插座里。另一个在电脑旁边找个插座，用网线连上电脑就行了。利用电力线传输数据。</p><p>我之前刚安装的时候，它速度很快，测速在 400Mbps 以上，考虑到衰减和干扰这个速度是可以接受的。</p><p>但过了一段时间之后它的速度下降的很厉害，最高只有 50Mbps 上下，还不到我宽带的出口速度，已经开始拖慢我的网速了。原因可能是房间供电线路老化之类的吧。我懒得追究了，当时就购入了外置无线网卡解决速度问题。电力猫闲置下来后就送给家里信号不好的同事了。</p><p>鉴于上次的经历不是很愉快，这次我又换了个牌子，重新买了一对水星的千兆电力猫：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/901ea349.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-15-36.png"></p><p>结果还是一样，刚插上去好好的，速度很快。不一会儿速度就掉了下来，并且大量丢包，玩游戏很难受。</p><p>那没办法了，还是得考虑有线方案。</p><h2 id="2-增加辅助路由"><a href="#2-增加辅助路由" class="headerlink" title="2. 增加辅助路由"></a>2. 增加辅助路由</h2><p>说是有线，其实只要保证 VirtualBox 给虚拟机桥接的那个网卡是有线网卡就行了。上公网不一定非要走有线。</p><p>事到如今，我也没法坚持不加新设备了。最优雅的方式其实还是用 OpenWRT 系统的路由器重新部署一套，一次部署到处使用。但我懒得重新刷 OpenWRT 的系统，想只用一个普通路由解决问题。</p><p>所以我又找了个小路由器，把宿主机有线插入 LAN，并把有线网卡桥接到虚拟机，虚拟机另外添加一张 NAT 网卡用于共享主机的网络连接。其他需要透明代理的设备直接无线接入小路由器。</p><p>拓扑图大概是下面这个样子。宿主机双网卡，无线接主路由，有线接辅助路由。虚拟机双网卡，一张 NAT 上公网，一张桥接辅助路由当透明代理网关。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/c5c0fb24.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-15-57.png"></p><p>此时因为宿主机和虚拟机都双网卡了，需要设置一下路由表。</p><p>Windows 的路由表比较奇怪，我起初是通过增加有线网卡的跃点数 metric ，试图降低有线网卡（接辅助路由，无公网访问）的优先级，但修改后可以连通外网，DNS 却始终优先使用有线网卡获得的 192.168.2.2 的 DNS 地址，无法解析。我试图手动改路由表，折腾半天也没让它优先走无线网卡的 DNS。但直接 ping 公网 IP 地址确实是通的。</p><p>后来换了个思路，降低无线网卡的跃点数。如图，设置成1之后就 OK 了，Windows 的 DNS 策略真的很谜。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/e969ae75.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-16-13.png"></p><p>设置好之后路由表如下，都是系统自动生成的。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/0e0a74c6.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-16-22.png"></p><p>实际上宿主机实际上是三网卡的，两个无线一个有线。起初我尝试用另外一张无线网卡作为 AP 模式发射热点，取代辅助路由的功能，后来发现在 Windows 上配置这个太麻烦了就放弃了。</p><p>然后要设置一下虚拟机的 Ubuntu 系统的路由表。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/b1670d1f.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-16-35.png"></p><p>可以看到虚拟机有两块网卡，enp0s3 是 NAT 连接到主机的网卡，IP 设成自动获取就可以。</p><p>enp0s8 是桥接了有线网卡，接入辅助路由的。手动指定其 IP 地址为 192.168.2.2。</p><p>此时路由表的主出口不一定是 NAT 那个网卡，导致公网不通。我们删掉默认的出口路由，手动指定出口为 enp0s3 即可。命令如下：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/4ba28f3d.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-16-48.png"></p><p>需要使用 sudo 执行。执行过后虚拟机的路由表如下：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/7469a5d0.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-16-55.png"></p><p>很简洁，此时我们可以正常上公网了。</p><p>之后把 Switch 接入辅助路由的无线网，手动设置网关为 192.168.2.2，MTU 稍微改小到 1390。参照上篇文章的内容，Switch 应该已经通过代理上网了。测速结果非常可观，没有瓶颈。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Switch%20%E6%B8%B8%E6%88%8F%E5%8A%A0%E9%80%9F%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%94%B9%E8%BF%9B%E9%83%A8%E7%BD%B2/f94f5add.png" alt="Switch%20游戏加速透明代理的改进部署_2018-11-26-13-17-04.png"></p><p>好了，很开心。进行收尾工作，把手动设置路由的两句话加到 linux 的自启动里，尝试重启主机和虚拟机几次，都可以自动初始化完成。</p><p>非常优雅。收工。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上篇文章（&lt;a href=&quot;/posts/trans-proxy-splatoon2/&quot;&gt;搭建透明代理加速 Splatoon2 游戏手记&lt;/a&gt;）中，关于部署方式我提到，由于无线网卡的不兼容，开虚拟机的宿主机必须以有线方式接入路由设备。&lt;/p&gt;
&lt;p&gt;我当时选择的是把宿主机</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="透明代理" scheme="https://www.coder17.com/tags/%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/"/>
    
    <category term="Splatoon2" scheme="https://www.coder17.com/tags/Splatoon2/"/>
    
    <category term="加速" scheme="https://www.coder17.com/tags/%E5%8A%A0%E9%80%9F/"/>
    
    <category term="Shadowsocks" scheme="https://www.coder17.com/tags/Shadowsocks/"/>
    
    <category term="改进" scheme="https://www.coder17.com/tags/%E6%94%B9%E8%BF%9B/"/>
    
  </entry>
  
  <entry>
    <title>搭建透明代理加速 Splatoon2 游戏手记</title>
    <link href="https://www.coder17.com/posts/trans-proxy-splatoon2/"/>
    <id>https://www.coder17.com/posts/trans-proxy-splatoon2/</id>
    <published>2018-08-01T15:00:00.000Z</published>
    <updated>2018-08-01T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周末，朋友终于带着 Switch 来我家玩耍了。好，棒，很开心。</p><p>我发的胖友圈是这样的：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/1a110660.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-20-31.png"></p><p>看起来很开心的样子，然而实际上是这样的：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/090745e2.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-20-41.png"></p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/2143eb7f.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-20-48.png"></p><p>以前一直还可以的联通宽带突然爆炸，怎么都连不上老任的服务器。挨着的两个机器甚至无法在好友列表里看到彼此的在线状态。</p><p>我天真地以为过几天网就会好起来吧。但周末结束了，我还是连不上 Splatoon。</p><p>我不管，我要玩乌贼暖暖。</p><h2 id="1-原理与方案选择"><a href="#1-原理与方案选择" class="headerlink" title="1. 原理与方案选择"></a>1. 原理与方案选择</h2><p>加速游戏无非是包转发，之前在 windows 电脑部署的普通 ss 客户端只能转发 http 包。设置其为代理后只能进大厅，无法用 udp 协议与其他玩家通信。</p><p>因此需要部署一个能代理 udp 包的东西。</p><p>当然，最简单的办法还是买现成的加速器，比如X易的UU，但是很贵，一个月三十。想了想九月份开始任天堂也要收联网服务费了，还是放弃了购买加速器。</p><p>自食其力的话，首先想到的是全局微屁恩，但是这东西一来部署起来非常麻烦，二来协议特征太明显，用不了两天就会被安排。</p><p>有一个 SS-Tap 号称能把 ss 转成全局的，但我试过之后并不能分享给局域网设备。</p><p>那么还是找我们的老朋友小飞机吧，ss-libev 分支有一个 ss-redir 的工具，是专用来做透明代理的，可以一战。</p><h2 id="2-软硬环境"><a href="#2-软硬环境" class="headerlink" title="2. 软硬环境"></a>2. 软硬环境</h2><p>硬件上我不想使用路由器刷 op 之类的智能系统的方式，一来刷系统很烦，二来需要多加一个设备。</p><p>我当前有一台 7*24 开机的大笔记本（以下称为S），平时做 NAS 服务器使用。那么可以在这个机器上开一个虚拟机装 ubuntu，使用桥接模式接入现有的网络，再作为网关，在 switch 上手动指定即可。</p><p>ubuntu 使用了 16.04，32 位，内存随便划了 512M。</p><h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><p>服务端的部署就不废话了，懒得自己搭买一个也可以的，但注意要加 -u 支持 udp 转发。</p><p>客户端在我们刚才的虚拟机里（以下称为A）。装好系统之后，打开 sshd，在本机上使用 ssh 连到虚拟机A。</p><p>首先要打开系统的转发模式开关。sudo vim /etc/sysctl.conf ，去掉 net.ipv4.ip_forward=1 的注释。然后 sudo sysctl -p 立即生效。</p><p>此时设置局域网内随便一个终端的网关为这个虚拟机的 IP，DNS 可以指定为 114.114.114.114，测试一下应该可以联网。出口 IP 依旧是你本地的出口。我这里使用了另外一台虚拟机（以下称为B）。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/fab63459.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-21-15.png"></p><p>参考官方文档，在虚拟机A上编译最新版 ss-libev。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --no-install-recommends build-essential autoconf libtool libssl-dev gawk debhelper dh-systemd init-system-helpers pkg-config asciidoc xmlto apg libpcre3-dev zlib1g-dev libev-dev libudns-dev libsodium-dev libmbedtls-dev libc-ares-dev automake</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/shadowsocks/shadowsocks-libev.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> shadowsocks-libev</span><br><span class="line"></span><br><span class="line">git submodule update --init</span><br><span class="line"></span><br><span class="line">./autogen.sh &amp;&amp; ./configure &amp;&amp; make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>其实如果用 ubuntu 16.10 以上系统的话是不用自己编译的，软件源里有二进制包可以直接下载。但为了确保版本最新，还是推荐编译。</p><p>安装好之后，自己写一个 json 把服务器信息写进去。会用小飞机的都知道我也不废话了。</p><p>然后启动 ss-redir，监听的本地端口以 1080 为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ss-redir -c /etc/s.json -u -v</span><br></pre></td></tr></table></figure><p><code>-u</code> 是支持 udp 转发的开关，这个前面说过，也需要服务端支持。</p><p><code>-v</code> 是废话模式的开关，可以输出很多 info 级的日志便于调试。</p><p>打开后应该如图所示，开始监听 1080 端口了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/680feb28.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-22-30.png"></p><p>此时还没有设置转发，在网内其他终端测试出口依旧是本地联通的 IP。</p><p>然后编辑 iptables 实现转发。其中 tcp 包通过 redirect 直接重定向到 1080 端口即可。但 udp 包由于是无状态连接，系统无法通过连接跟踪找到它本来的目的地，因此不能直接重定向，需要借助 tproxy 实现。</p><blockquote><p>首先我们来了解一下 iptables 的 REDIRECT 重定向的意义，REDIRECT 其实就是 DNAT 目的地址转换，只不过它的目的地址为 127.0.0.1，因此给它取了个形象的名字 - 重定向；DNAT 其实是很粗暴的，就是修改数据包的目的 IP 和目的 Port；那么在 ss-redir 中，它是怎么获取数据包原来的目的 IP 和目的 Port 的呢（就像发快递，你总得知道这个快件要发往哪吧，不然你收到来有什么用）？答案是，借助 Linux 的连接跟踪机制。</p><p>什么是连接跟踪？顾名思义，就是跟踪并记录网络连接的状态。Linux 会为每个经过网络堆栈的数据包都生成一个新的连接记录项，此后，所有属于此连接的数据包都会被唯一分配给这个连接，并标识连接的状态。因此，做了 NAT（网络地址转换）的数据包在内核中都是有记录的。而 ss-redir 只要使用 netfilter 提供的 API 即可从连接记录项中获取数据包原本的目的地址和目的端口，来进行代理。</p><p>但是，上面这种情况只针对 TCP；对于 UDP，如果你做了 DNAT，就无法再获取数据包的原目的地址和目的端口了，具体的技术细节我不清楚，我们只需要知道 UDP 透明代理没有这么简单。</p><p>那么该怎么透明代理 UDP 呢？利用 TPROXY 技术。TPROXY 是在 Kernel 2.6.28 引进的全新透明代理技术，TPROXY 完全不同于传统的 DNAT 方式。TPROXY 实现的透明代理有以下特点：</p><ul><li><p>不对 IP 报文做改动（不做 DNAT）；</p></li><li><p>应用层可用非本机 IP 与其它主机建立 TCP/UDP 连接；</p></li><li><p>Kernel 通过 iptables-tproxy 和策略路由将非本机流量送到 socket 层；</p></li><li><p>仍需要通过其它技术拦截做代理的流量到代理服务器（WCCP 或 PBR 策略路由）。</p></li></ul></blockquote><p>以上摘自： <a href="https://paper.tuisec.win/detail/da1a980ab61ce92">https://paper.tuisec.win/detail/da1a980ab61ce92</a></p><p>那么对 iptables 执行以下改动（先使用 sudo -i 进入 root 权限 bash）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SS-REDIR TCP</span></span><br><span class="line"></span><br><span class="line">iptables -t nat -N SSREDIR_TCP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bypass ssserver and LAN</span></span><br><span class="line"></span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d ===server ip=== -j RETURN</span><br><span class="line"></span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A SSREDIR_TCP -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect TCP</span></span><br><span class="line"></span><br><span class="line">iptables -t nat -A SSREDIR_TCP -p tcp -j REDIRECT --to-ports 1080</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j SSREDIR_TCP</span><br><span class="line"></span><br><span class="line"><span class="comment"># SS_REDIR UDP</span></span><br><span class="line"></span><br><span class="line">ip rule add fwmark 0x02/0x02 table 100</span><br><span class="line">ip route add <span class="built_in">local</span> 0.0.0.0/0 dev lo table 100</span><br><span class="line">iptables -t mangle -N SSREDIR_UDP</span><br><span class="line"></span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d ===server ip=== -j RETURN</span><br><span class="line"></span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect UDP</span></span><br><span class="line"></span><br><span class="line">iptables -t mangle -A SSREDIR_UDP -p udp -j TPROXY --on-port 1080 --tproxy-mark 0x02/0x02</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable</span></span><br><span class="line"></span><br><span class="line">iptables -t mangle -A PREROUTING -j SSREDIR_UDP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的 <code>===server ip===</code> 是你服务器的 IP。</p><p>简单说就是先新建了一个链，把目的地是你服务器地址和其他一些内网地址的包放过去，剩下的全部 tcp 包都转到本地 1080 端口上。然后把这个链加到 PREROUTING 链上，转掉所有入站的 tcp 包。</p><p>然后又新建了一个表，规定表里所有的数据包打上一个标记（0x02/0x02，我随便写的值，也可以使用其他值），再新建一个链，同样放过一些特殊地址的包之后，把剩下的 udp 包全部搞进这个表带上标记。再把所有带标记的包转到本地 1080 端口。最后把这个链也挂到PREROUTING 链上，使之生效。</p><p>上面两段话用词不太准确，只是说个意思方便理解。</p><p>那么加完转发之后，我们的透明代理理论上已经开始工作了。</p><p>在虚拟机B里测测看，出口已经变成服务器地址了。在浏览器里开几个页面也都正常显示。此时可以更改 DNS 为 8.8.8.8 了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/0688bae0.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-26-09.png"></p><p>好，爽。</p><h2 id="4-坑：桥接无线网卡"><a href="#4-坑：桥接无线网卡" class="headerlink" title="4. 坑：桥接无线网卡"></a>4. 坑：桥接无线网卡</h2><p>高兴的太早了。我上面是在虚拟机里测的。等我把手机和另外一台物理电脑也设置成透明代理做网关之后，却时断时续地打不开网页。甚至我取消 iptables 里面的转发设置时，也不能显示我本地的 IP 出口。</p><p>提示的错误也很奇怪，一会儿是 DNS 无法解析，一会儿是无法连接。做网关的虚拟机A里面的日志也是时断时续。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/42067b08.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-40-20.png"></p><p>查了半天，毫无头绪，把前面的步骤试了又试也没有变化。</p><p>哎，脑壳疼。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/92d8c4eb.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-40-32.png"></p><p>但注意到一个问题，那就是我测试的时候，在同一台大电脑上开的另一个虚拟机下测就没问题，用局域网内其他的设备测就时断时续。</p><p>在这卡了三天之后，怀疑的目光落在了网卡上。宿主机S因为自带的网卡过于老迈，不支持 5G WiFi，为了保证连接速度我使用了一块水星的 USB 外置网卡。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/389f4ec1.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-40-41.png"></p><p>谷歌了一顿之后发现有不少人声称他们的无线网卡无法在 VirtualBox 等虚拟机软件里设置为桥接模式。原因是无线网卡通常不支持混杂模式，无法接收非主机 IP 地址的包。</p><p>但我这个能桥接啊，真的是它的问题么？</p><p>我尝试把虚拟机 A 和 B 桥接的网卡都改回了笔记本自带的 Intel 网卡。这次是真的不能桥接了，完全无法联网，在路由器后台也看不见两个虚拟机。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/3594aac8.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-40-54.png"></p><p>那看来网卡的嫌疑真的很大，那我们试试有线连接吧。</p><p>我之前的电力猫送人了，但路由器在客厅，想要物理接入的话只能把宿主机笔记本S抱过去。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/9193b80c.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-41-04.png"></p><p>然后桥接有线网卡，再试，破案了，网内所有终端都能正常联网了。</p><p>这个坑最坑的地方在于，无线网卡对混杂模式支持的不完整，虽然能正常桥接联网，但却无法转发所有的入站包，使问题难以定位。</p><h2 id="5-坑：MTU"><a href="#5-坑：MTU" class="headerlink" title="5. 坑：MTU"></a>5. 坑：MTU</h2><p>终于填好了坑，我们可以愉快地填下一个坑了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/d19c73a7.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-41-28.png"></p><p>把 switch 也接入到网关下之后，发现能正常登录、进房间，但无法和其他用户连接。</p><p>显然是 udp 的哪里出了问题吧。但看日志也挺正常的啊，所有的请求都有回应。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/28a82285.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-41-40.png"></p><p>这时我注意到，在使用 curl 请求某个地址的时候，总是先发出两个 udp 包，等待五秒后，又发出两个 udp 包，才解析成功。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/b24336d1.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-41-51.png"></p><p>但直接 nslookup 的时候又能立即返回结果。</p><p>这个现象十分诡异，我到现在也不能解释。</p><p>客户端没有发现问题，那么看看服务端吧。由于之前测试一直用的是购买的服务，看不到日志。所以我又临时开了一台 vps，搭了个服务端来看日志。</p><p>诡异的是使用自己搭的服务端就没有这个问题了，秒查秒回。</p><p>只能理解成大概购买的服务开了某种多重发包的插件吧。</p><p>但问题依然没有解决。</p><p>尝试开了一局游戏，发现在匹配对手的过程中，客户端快速滚过的日志可以看出游戏在反复试图与其他玩家的 ip 发 udp 包试图连接。但服务端的日志滚动速度明显低于客户端。</p><p>怀疑丢包了。</p><p>丢包最大的可能性是 udp 包在传输路径上被 ISP 给丢弃了。udp 包优先级不高，如果 QoS 策略比较激进那么丢包的概率很高。</p><p>但我用 nc 测了测 udp，发现并没有丢包。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/47be85fe.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-42-03.png"></p><p>陷入沉思，在网上随便搜索的时候，看到这么一个帖子：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/6a9275db.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-42-14.png"></p><p>啥玩意儿？MTU 超了居然不拆分而是直接丢包？难怪我用 nc 发小包测的时候不丢。</p><p>联想到之前在 github 上看 madeye 大神回的 issue 里也提到过建议一个 xbox 连不上的哥们试试改 MTU 小一点，我就死马当活马医地在 switch 里把 MTU 从 1400 改成了 1390.。</p><p>然后我特么就进！游！戏！了！</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/dd221766.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-42-24.png"></p><p>看着屏幕上翻滚的日志我是真的想拥抱大海。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E6%90%AD%E5%BB%BA%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%20Splatoon2%20%E6%B8%B8%E6%88%8F%E6%89%8B%E8%AE%B0/427aefa6.png" alt="搭建透明代理加速 Splatoon2 游戏手记_2018-11-26-13-42-36.png"></p><p>（然后我输了，对面的马桶是真的不知到该怎么打掉</p><h2 id="6-总结优化"><a href="#6-总结优化" class="headerlink" title="6. 总结优化"></a>6. 总结优化</h2><p>这次一共遇到两个迷惑性较大的坑，一个是无线网卡的混杂模式，因为一直以来工作得很好，我并没有第一时间怀疑它。</p><p>另一个是 MTU 的问题，正常讲数据包大于 MTU 时会被拆分，但 ss-libev 作了丢包的操作不知道是出于什么考虑，可能是消除协议特征？</p><p>最后那个 curl 会 DNS 查两次的问题依然没有头绪。不过后来将服务端拆掉换回买的服务之后依然可以正常连接，说明这个问题并没有实际影响，暂且不管吧。</p><p>至于方案的优化，后期把写 iptables 和开 ss-redir 服务的命令写到 rc.local 里开机启动即可。注意 rc.local 加载时系统的环境变量不完整，启动 ss-redir 需要指定其完整路径，可以使用 which ss-dir 或者 whereis ss-dir 命令查看。</p><p>作为网关的虚拟机A也可以调小内存，大概 256M 也可以正常工作的。</p><p>宿主机S决定就让它呆在路由器旁边了，一个服务器是不需要放在卧室里的。回头把外接的硬盘盒和 UPS 也搬过去。</p><p>坑就这么多，谢谢观赏。</p><p>参考资料：</p><p><a href="http://ezlost.tk/2018/02/24/ss-redir/">http://ezlost.tk/2018/02/24/ss-redir/</a></p><p><a href="https://blog.csdn.net/lvshaorong/article/details/52909055">https://blog.csdn.net/lvshaorong/article/details/52909055</a></p><p><a href="https://blog.csdn.net/lvshaorong/article/details/53203674">https://blog.csdn.net/lvshaorong/article/details/53203674</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-libev/issues/1883">https://github.com/shadowsocks/shadowsocks-libev/issues/1883</a></p><p><a href="https://cn.aliyun.com/jiaocheng/148168.html">https://cn.aliyun.com/jiaocheng/148168.html</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-libev/issues/1566">https://github.com/shadowsocks/shadowsocks-libev/issues/1566</a></p><p><a href="https://lixingcong.github.io/2018/06/11/ss-redir-ipset/">https://lixingcong.github.io/2018/06/11/ss-redir-ipset/</a></p><p><a href="https://usodesu.ga/2018-04-26/OpenWrt-Transparent-Proxy-with-ss-redir/">https://usodesu.ga/2018-04-26/OpenWrt-Transparent-Proxy-with-ss-redir/</a></p><p><a href="https://doub.io/ss-jc34/">https://doub.io/ss-jc34/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周末，朋友终于带着 Switch 来我家玩耍了。好，棒，很开心。&lt;/p&gt;
&lt;p&gt;我发的胖友圈是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/images/loading.gif&quot; data-lazy-src=&quot;/blogimg/%E6%90%AD%E5%BB%BA%E9</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="透明代理" scheme="https://www.coder17.com/tags/%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/"/>
    
    <category term="Splatoon2" scheme="https://www.coder17.com/tags/Splatoon2/"/>
    
    <category term="加速" scheme="https://www.coder17.com/tags/%E5%8A%A0%E9%80%9F/"/>
    
    <category term="Shadowsocks" scheme="https://www.coder17.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>系统从大硬盘无损迁移到小硬盘的方法备忘</title>
    <link href="https://www.coder17.com/posts/hdd-move-system/"/>
    <id>https://www.coder17.com/posts/hdd-move-system/</id>
    <published>2018-05-09T15:00:00.000Z</published>
    <updated>2018-05-09T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>（好久没写东西，博客也一直没时间迁移，实在是很丢人，谢谢大家还没取关。）</p><p>一般来讲迁移硬盘数据都是小硬盘到大硬盘，很多硬盘对拷软件也只支持源盘小于目标盘的数据迁移。有的支持从大到小迁移的软件也是按文件复制。对于一些隐藏分区或者特殊格式的分区来说，这种复制方式可能丢失数据。我研究了半天摸索了以下方法，作个备忘与参考。</p><p>思路是：<br>新建一个 vhdx 虚拟硬盘→大盘拷进虚拟盘→虚拟盘缩容→虚拟盘拷进小硬盘</p><p>关键节点在于虚拟盘缩容，这样可以保证每一步对拷都是逻辑上的小盘到大盘。注意大盘上的实际数据量不能超过小盘容量。</p><p>这个思路很绕，我暂时没有想出更好的方式。如果有更好的思路或者工具请一定不吝赐教。</p><h2 id="1-新建虚拟盘"><a href="#1-新建虚拟盘" class="headerlink" title="1 新建虚拟盘"></a>1 新建虚拟盘</h2><p>这个很简单，Windows 的磁盘管理就可以。注意新建 vhdx 格式的，否则后面缩容的时候还要花时间转换。虚拟盘最大容量要大于大盘一点，选择动态容量即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/0.gif" alt="image-0"></p><h2 id="2-大盘拷进虚拟盘"><a href="#2-大盘拷进虚拟盘" class="headerlink" title="2 大盘拷进虚拟盘"></a>2 大盘拷进虚拟盘</h2><p>在 Windows 的磁盘管理里先把虚拟盘挂载上，一般新建之后会自动挂载。盘符分不分都行。然后随便找个硬盘对拷软件，比如 DiskGenius，把大盘对拷到虚拟盘上。对拷的时候不要选择创建新的硬盘 ID。这一步就不放图了，时间会比较久。</p><h2 id="3-虚拟盘缩容"><a href="#3-虚拟盘缩容" class="headerlink" title="3 虚拟盘缩容"></a>3 虚拟盘缩容</h2><h3 id="3-1-分区调整"><a href="#3-1-分区调整" class="headerlink" title="3.1 分区调整"></a>3.1 分区调整</h3><p>在分区软件里把虚拟盘里的数据分区调整到一起，压缩数据分区到刚好够用，把多出来的空间设置为未分配，使未分配空间全在盘的最后。注意必须保证前面的数据区总容量不超过小盘容量。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/image-20210421181211292.png" alt="image-20210421181211292"></p><h3 id="3-2-虚拟盘容量调整"><a href="#3-2-虚拟盘容量调整" class="headerlink" title="3.2 虚拟盘容量调整"></a>3.2 虚拟盘容量调整</h3><p>首先你要装有 Hyper-V 工具，没有的话到控制面板→添加删除程序→添加删除 Windows 组件里面，把 Hyper-V 相关的都勾上。装好之后要重启。注意，装了 Hyper-V 之后你的 VirtualBox 之类的虚拟机就不能用了，如果要用的话待会儿再卸掉 Hyper-V。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/image-20210421181347514.png" alt="image-20210421181347514"></p><p>装好之后用管理员权限打开 Powershell。在开始菜单输入 Powershell 然后按 Ctrl + Shift + Enter 就是管理员权限。</p><p>执行 ：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Resize-VHD</span> <span class="literal">-Path</span> <span class="string">&quot;E:\sysbk.vhdx&quot;</span> <span class="literal">-ToMinimumSize</span></span><br></pre></td></tr></table></figure><p>注意把 vhdx 的路径换掉。应该很快就完事儿了，然后执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-VHD</span> <span class="literal">-Path</span> <span class="string">&quot;E:\sysbk.vhdx&quot;</span></span><br></pre></td></tr></table></figure><p>就可以看到虚拟盘容量已经减小到和实际数据量差不多了。这个时候虚拟盘的容量应该是小于目标小盘的容量的，否则后面会失败。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/image-20210421181459770.png" alt="image-20210421181459770"></p><h2 id="4-虚拟盘拷进小硬盘"><a href="#4-虚拟盘拷进小硬盘" class="headerlink" title="4 虚拟盘拷进小硬盘"></a>4 虚拟盘拷进小硬盘</h2><p>很简单的，在磁盘管理里面把缩小之后的 vhdx 挂上，然后在分区软件里对拷到小硬盘上就可以了。</p><p>但是！</p><p>我在这一步遇到了各种疑难杂症。</p><p>首先我的目标盘是一个 nvme 盘，没法通过 USB 挂到其他电脑上对拷，所以只能在本机上从U盘启动 PE 对拷。但这个 PE 是似乎不能挂载 vhd 的，挂载的选项是灰色。</p><p>所幸 DiskGenius 里是可以直接挂虚拟硬盘文件的。然而似乎对 vhdx 兼容性不好，挂载之后始终显示整个盘都是未分配。</p><p>vhd 转 vhdx 是单向的，不能从 vhdx 转为 vhd。我只能新建了一个比缩容后的 vhdx 大一丁点的 vhd，然后在正常的系统内通过磁盘管理挂载了 vhdx，再在  DiskGenius 里从 vhdx 到 vhd 又对拷了一遍。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/image-20210421181543316.png" alt="image-20210421181543316"></p><p>真的需要很长很长的时间，长到等它对拷完成之后我已经快忘了这件事了。<br>然后我就有了一个缩容之后的 vhd 文件。重新启动 PE 之后发现，</p><p>发现这 PE 又能在磁盘管理里挂载 vhd 了！</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E7%B3%BB%E7%BB%9F%E4%BB%8E%E5%A4%A7%E7%A1%AC%E7%9B%98%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E5%B0%8F%E7%A1%AC%E7%9B%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98/image-20210421181617712.png" alt="image-20210421181617712"></p><p>好气啊。按照常规操作再来一遍，挂载 vhd，对拷。</p><p>拷完之后，由于我们之前把虚拟硬盘的容量设置成小于小硬盘的实际容量了，所以小硬盘尾部会出现未分配空间。根据需要把这部分空间合并到前面的分区中。</p><p>这样就保留了分区结构和分区表等等的同时，从大盘到小盘完成了系统迁移。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（好久没写东西，博客也一直没时间迁移，实在是很丢人，谢谢大家还没取关。）&lt;/p&gt;
&lt;p&gt;一般来讲迁移硬盘数据都是小硬盘到大硬盘，很多硬盘对拷软件也只支持源盘小于目标盘的数据迁移。有的支持从大到小迁移的软件也是按文件复制。对于一些隐藏分区或者特殊格式的分区来说，这种复制方式可</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="硬盘" scheme="https://www.coder17.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
    <category term="无损迁移" scheme="https://www.coder17.com/tags/%E6%97%A0%E6%8D%9F%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>联通宽带更新后登陆指南</title>
    <link href="https://www.coder17.com/posts/bjunicom-201/"/>
    <id>https://www.coder17.com/posts/bjunicom-201/</id>
    <published>2017-08-25T15:00:00.000Z</published>
    <updated>2017-08-25T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>北京联通的校园201宽带一直限制登陆数。以前我们使用用户名添加 @wo201 ，密码添加 /001 字符的方式直接路由器拨号。但七月中旬一次更新之后该方法失效，加密方式改变。</p><p>最近不少人回学校了问我怎么拨号，写个教程比较方便。</p><p><strong>先介绍一下新的 pppoe 加密方式</strong></p><p>参考了 <a href="https://fanzheng.org/archives/17#7">FanZheng’s blog</a> ：</p><p>只是想知道怎么上网的可以跳过这段。</p><blockquote><ul><li>真实账号=账号+<code>@wo201</code>（这个跟原来的没有变化）</li><li>真实密码=动态pin码+密码</li></ul><p>而这个动态pin码，是访问<a href="http://114.247.41.50:9343/aaa/get/pin?user=%E8%B4%A6%E5%8F%B7%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E8%BF%94%E5%9B%9E%E7%9A%84json%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84pin%E5%AD%97%E6%AE%B5%E3%80%82%E5%AE%83%E6%98%AF%E4%B8%AA6%E4%BD%8D%E6%95%B0%E5%AD%97%EF%BC%8C%E5%A4%A7%E7%BA%A610%E7%A7%92%E4%BC%9A%E6%9B%B4%E6%96%B0%E4%B8%80%E6%AC%A1%E3%80%82">http://114.247.41.50:9343/aaa/get/pin?user=账号这个地址返回的json数据中的pin字段。它是个6位数字，大约10秒会更新一次。</a></p><p>也就是说，在这种加密方式下，想要使用PPPoE拨号，就得在10秒内完成获取pin码、填写密码和进行拨号的步骤，对于路由器来说，还是有点麻烦的。最关键的是每次拨号都要改一下密码，因此操作频率就取决于路由器是否断电以及联通设置的一次拨号的最长连接时间了。</p></blockquote><p>那个返回动态验证码的页面，传入的账号即使是随机数字也能返回，说明是服务器端的一个算法动态生成的。</p><p><strong>再介绍一下现在可行的拨号方式</strong></p><ol><li><p>如果想继续使用路由器自动 pppoe 拨号，需要刷了 op 等智能系统的路由器，写脚本获取动态密码。技术上没有难度，过程上比较繁琐。此处略过。</p></li><li><p>如果想使用官方推荐的方式拨号，即拨号后只能本机上网。可以将路由器 DHCP 关掉，LAN 口插猫，当作交换机使用，并在电脑上下载新的官方客户端直接拨号。</p></li><li><p><strong>如果想继续分享使用宽带，但不会方法1</strong>，使用原来的网页入口登录即可。这也是我比较推荐的简易方法。</p></li></ol><p>首先将路由器获取地址方式改为动态 IP，关闭路由器拨号，打开 DHCP，路由器 WAN 口接猫。</p><p>然后使用手机连接路由器，随便打开一个网页，弹出如图界面。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%81%94%E9%80%9A%E5%AE%BD%E5%B8%A6%E6%9B%B4%E6%96%B0%E5%90%8E%E7%99%BB%E9%99%86%E6%8C%87%E5%8D%97/image-20210421180235517.png" alt="image-20210421180235517"></p><p>输入你的宽带用户名密码登录。登录后路由器下其他设备也可上网。断网后需重新登录。</p><p>如果没有手机，使用 Chrome 浏览器，按 F12 打开开发者模式。按图中按钮打开移动端模拟。然后随便打开一个网页，会弹出和上图相同的手机登录页，照前操作即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%81%94%E9%80%9A%E5%AE%BD%E5%B8%A6%E6%9B%B4%E6%96%B0%E5%90%8E%E7%99%BB%E9%99%86%E6%8C%87%E5%8D%97/image-20210421180303582.png" alt="image-20210421180303582"></p><p>如果想自动拨号，使用 curl 或者用 python 等语言模拟网页登录发包即可。包的内容很简单，使用 Fiddler 抓包即可查看，也可以用 Chrome 开发者模式直接抓包。会写的都会抓，我就不废话了。</p><p>最后，垄断校园宽带限制终端数的运营商都去吔屎啦。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E8%81%94%E9%80%9A%E5%AE%BD%E5%B8%A6%E6%9B%B4%E6%96%B0%E5%90%8E%E7%99%BB%E9%99%86%E6%8C%87%E5%8D%97/image-20210421180604118.png" alt="image-20210421180604118"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;北京联通的校园201宽带一直限制登陆数。以前我们使用用户名添加 @wo201 ，密码添加 /001 字符的方式直接路由器拨号。但七月中旬一次更新之后该方法失效，加密方式改变。&lt;/p&gt;
&lt;p&gt;最近不少人回学校了问我怎么拨号，写个教程比较方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="北工大" scheme="https://www.coder17.com/tags/%E5%8C%97%E5%B7%A5%E5%A4%A7/"/>
    
    <category term="联通" scheme="https://www.coder17.com/tags/%E8%81%94%E9%80%9A/"/>
    
    <category term="201" scheme="https://www.coder17.com/tags/201/"/>
    
  </entry>
  
  <entry>
    <title>北工大野生助手</title>
    <link href="https://www.coder17.com/posts/20170112-bjut-helper/"/>
    <id>https://www.coder17.com/posts/20170112-bjut-helper/</id>
    <published>2017-01-12T05:10:46.000Z</published>
    <updated>2017-01-12T05:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>北工大查分野生助手（野生工大助手）。是<a href="http://www.wangyufeng.org/">王雨峰童鞋</a>带头写的一个工大查分小助手。后来申请了星火基金，现在由我和雨峰共同维护。具体说明还在写，先写更新日志。 </p><p>昨晚更新之后很多童鞋说加权和绩点都变了。是这样的，我们更新了绩点的算法，根据教务处的文件，绩点的计算也是要按学分加权的。而加权平均分的部分之前因为学校的数据格式不统一，导致了部分人的新生研讨课也被算进了加权。更新之后能识别出这部分新生研讨课，所以新的加权分就不包含研讨了，导致一部分同学的加权变化。</p><p>昨天访问量达到了 18392，谢谢大家！</p><p>以后也请大家多多支持啦！</p><p>项目地址：<a href="https://github.com/wangyufeng0615/bjuthelper">https://github.com/wangyufeng0615/bjuthelper</a><br>主页：<a href="http://chafen.bjut123.com/">http://chafen.bjut123.com</a><br>内测版：<a href="http://bjut.devchen.cn/">http://bjut.devchen.cn</a>  </p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/20170112-bjut-helper/image-20210421025448423.png" alt="image-20210421025448423"><img src= "/images/loading.gif" data-lazy-src="/blogimg/20170112-bjut-helper/image-20210421025456521.png" alt="image-20210421025456521"></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="2017-1-12"><a href="#2017-1-12" class="headerlink" title="2017.1.12"></a>2017.1.12</h3><ul><li>添加了更新日志。 </li><li>微调了总科目数的提示文字，避免歧义。 </li><li>修正了未通过科目数计算错误。</li><li>修正了中文成绩（等级）导致的科目计算错误。</li><li>增加了可折叠的通过/未通过成绩统计。</li></ul><h3 id="2017-1-11"><a href="#2017-1-11" class="headerlink" title="2017.1.11"></a>2017.1.11</h3><ul><li>修正了由新生研讨课的中文课程成绩和数据格式不统一导致的计算 bug。（可能会导致部分人加权分数变化）</li><li>修正了错误的绩点计算方式，已经更正为平均学分绩点（加权），参考 <a href="http://undergrad.bjut.edu.cn/WebInfo.aspx?Id=752">教务处文件</a>。</li><li>更改了页面编码为 UTF-8。（但教务那边的辣鸡还是 GB2312 我们也没什么办法）</li></ul><h3 id="2017-1-3"><a href="#2017-1-3" class="headerlink" title="2017.1.3"></a>2017.1.3</h3><ul><li>移除了文件式 cookie，加快了响应和服务器负载。</li><li>添加了免验证码。</li></ul><h3 id="2016-12-6"><a href="#2016-12-6" class="headerlink" title="2016.12.6"></a>2016.12.6</h3><ul><li>添加了说明信息和 ICP 备案号</li></ul><h3 id="2016-12-3"><a href="#2016-12-3" class="headerlink" title="2016.12.3"></a>2016.12.3</h3><ul><li>修正了部分验证码错位的问题</li></ul><h3 id="2016-11-28"><a href="#2016-11-28" class="headerlink" title="2016.11.28"></a>2016.11.28</h3><ul><li>微调了代码架构，加强了微信浏览器的兼容性。</li></ul><h3 id="2016-7-23"><a href="#2016-7-23" class="headerlink" title="2016.7.23"></a>2016.7.23</h3><ul><li>增加了代码说明和项目说明，配了图。</li></ul><h3 id="2016-7-16"><a href="#2016-7-16" class="headerlink" title="2016.7.16"></a>2016.7.16</h3><ul><li>首次上传</li></ul><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>来，扫码吧！<br>王雨峰的公众号：七系<br><img src= "/images/loading.gif" data-lazy-src="/blogimg/20170112-bjut-helper/1.png"><br>十七的空指针：<br><img src= "/images/loading.gif" data-lazy-src="/blogimg/20170112-bjut-helper/2.png"></p><p align = right>by Sykie Chen & Alan Wang2017.1.12</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;北工大查分野生助手（野生工大助手）。是&lt;a href=&quot;http://www.wangyufeng.org/&quot;&gt;王雨峰童鞋&lt;/a&gt;带头写的一个工大查分小助手。后来申请了星火基金，现在由我和雨峰共同维护。具体说明还在写，先写更新日志。 &lt;/p&gt;
&lt;p&gt;昨晚更新之后很多童鞋说加</summary>
      
    
    
    
    <category term="Services" scheme="https://www.coder17.com/categories/Services/"/>
    
    
    <category term="北工大" scheme="https://www.coder17.com/tags/%E5%8C%97%E5%B7%A5%E5%A4%A7/"/>
    
    <category term="查分" scheme="https://www.coder17.com/tags/%E6%9F%A5%E5%88%86/"/>
    
    <category term="爬虫" scheme="https://www.coder17.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="PHP" scheme="https://www.coder17.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>BJUT 抢课器</title>
    <link href="https://www.coder17.com/posts/bjut-course-rusher/"/>
    <id>https://www.coder17.com/posts/bjut-course-rusher/</id>
    <published>2016-12-22T15:00:00.000Z</published>
    <updated>2017-06-07T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>- 为什么别人都能抢到课，我抢不到？<br>- 那别人买彩票还中奖呢。</p><p>更新了一下，现在支持生僻字姓名了。<br>智障 Windows cmd 万年 GBK 编码，我也很为难啊。</p><p>反正我今年不缺课啦</p><hr><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><ol><li>本程序并没有什么卵用，只能捡漏，不要觉得是我把你的课抢走了。 </li><li>本程序随时可能报错卡死退出，可能导致您的电脑起火爆炸，请务必不要在无人看管时使用本程序。 </li><li>本程序导致的一切后果，作者都不承担。 </li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>修复了姓名中含有 GBK 以外字符时崩溃的问题。<br>重构了所有代码，现在本程序对用户友好了一些。<br>未在高并发期间测试过，不保证服务器不正常时的运行结果。<br>高峰期间如果无法登录，尝试修改重试次数与 base_url ，使用 IP 地址替代域名可以规避 DNS 解析失败风险。 </p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><ol><li>在 userinfo.py 中填入学号密码 </li><li>在 course.py 中填入要选的课全名，和它在搜索结果中的位置序号，用于定位重名课程。 </li></ol><h3 id="风险："><a href="#风险：" class="headerlink" title="风险："></a>风险：</h3><ol><li>概率很低的情况下，如果重名课程的排序发生变化，会选错。 </li><li>存在完全选错课的可能性。请在退课截止前停止程序并检查是否选了不需要的课。 </li></ol><p>适用于正方教务系统<br>暴力抢课，不讲道理。<br>具体修改方式见代码注释。   </p><p><del>本程序对用户不友好，使用前需要先改代码。</del></p><p>吔屎啦正方！ </p><p><a href="https://github.com/toshichi/BJUT-Course-Rusher">https://github.com/toshichi/BJUT-Course-Rusher</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;- 为什么别人都能抢到课，我抢不到？&lt;br&gt;- 那别人买彩票还中奖呢。&lt;/p&gt;
&lt;p&gt;更新了一下，现在支持生僻字姓名了。&lt;br&gt;智障 Windows cmd 万年 GBK 编码，我也很为难啊。&lt;/p&gt;
&lt;p&gt;反正我今年不缺课啦&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;警告&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="北工大" scheme="https://www.coder17.com/tags/%E5%8C%97%E5%B7%A5%E5%A4%A7/"/>
    
    <category term="抢课" scheme="https://www.coder17.com/tags/%E6%8A%A2%E8%AF%BE/"/>
    
    <category term="Python" scheme="https://www.coder17.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>配置 Shadowsocks 服务时 iptables 中的一处坑</title>
    <link href="https://www.coder17.com/posts/ss-iptables/"/>
    <id>https://www.coder17.com/posts/ss-iptables/</id>
    <published>2016-12-22T15:00:00.000Z</published>
    <updated>2016-12-22T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天把 ss 服务器从 ConoHa 迁移到 Linode 的东京2节点，丢包情况有所改善。</p><p>迁移后为了安全我重新配置了防火墙，只允许需要的端口通过。但在配置 ss 梯子服务时遇到了坑。在放行 ss 端口的情况下，ss 的手机客户端发生无法解析地址的情况，关掉防火墙则服务恢复正常，电脑端也一切正常。</p><p>iptables 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A OUTPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A OUTPUT -o lo -j ACCEPT</span><br><span class="line"></span><br><span class="line"># DNS</span><br><span class="line">-A OUTPUT -p udp --dport 53 -j ACCEPT</span><br><span class="line">-A INPUT -p udp --sport 53 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># SSH is 23333</span><br><span class="line">-A INPUT -p tcp -m multiport --dports 22,23333 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m multiport --sports 22,23333 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># http client</span><br><span class="line">-A INPUT -p tcp -m multiport --sports 80,443 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m multiport --dports 80,443 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># http server</span><br><span class="line">-A INPUT -p tcp -m multiport --dports 80,443 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m multiport --sports 80,443 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># shadowxxx</span><br><span class="line">-A INPUT -p tcp -m multiport --dports 6666,7777 -j ACCEPT</span><br><span class="line">-A INPUT -p udp -m multiport --dports 6666,7777 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp -m multiport --sports 6666,7777 -j ACCEPT</span><br><span class="line">-A OUTPUT -p udp -m multiport --sports 6666,7777 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># kcptun</span><br><span class="line">-A INPUT -p udp --dport 6677 -j ACCEPT</span><br><span class="line">-A OUTPUT -p udp --sport 6677 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp --dport 6677 -j ACCEPT</span><br><span class="line">-A OUTPUT -p tcp --sport 6677 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># drop</span><br><span class="line">-P INPUT DROP</span><br><span class="line">-P OUTPUT DROP</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>我百思不得其解，分析了各种可能性，最后只能开启日志找问题。</p><p>修改 /etc/rsyslog.conf ，添加一行：</p><p><code>kern.*   /var/log/iptables.log</code></p><p>将内核日志重定向到 iptables.log 方便查看。</p><p>在 iptables 文件中最后的 drop 前添加了 -A OUTPUT -j LOG，把所有被 drop 的数据包记录下来。</p><p>然后用 <code>tailf /var/log/iptables.log</code> 滚动输出日志。</p><p>日志输出如图：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E9%85%8D%E7%BD%AE%20Shadowsocks%20%20%E6%9C%8D%E5%8A%A1%E6%97%B6%20iptables%20%E4%B8%AD%E7%9A%84%E4%B8%80%E5%A4%84%E5%9D%91/image-20210421175608972.png" alt="image-20210421175608972"></p><p>可以看到有大量的53端口 DNS 查询被丢弃，但我已经在 iptables 中放行了 dns 查询啊？为什么呢？？？</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E9%85%8D%E7%BD%AE%20Shadowsocks%20%20%E6%9C%8D%E5%8A%A1%E6%97%B6%20iptables%20%E4%B8%AD%E7%9A%84%E4%B8%80%E5%A4%84%E5%9D%91/image-20210421175636741.png" alt="image-20210421175636741"></p><p>瞪了屏幕两分钟后发现这些查询都是 tcp 协议的，而我只放行了 udp 的 DNS包。</p><p>普通的 DNS 都是 udp 传输的，而手机端的 ss 似乎默认使用了 tcp 方式的 DNS 查询，导致数据包被丢弃。</p><p>在 iptables 中允许53端口 tcp 包后问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天把 ss 服务器从 ConoHa 迁移到 Linode 的东京2节点，丢包情况有所改善。&lt;/p&gt;
&lt;p&gt;迁移后为了安全我重新配置了防火墙，只允许需要的端口通过。但在配置 ss 梯子服务时遇到了坑。在放行 ss 端口的情况下，ss 的手机客户端发生无法解析地址的情况，关</summary>
      
    
    
    
    <category term="Services" scheme="https://www.coder17.com/categories/Services/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="科学上网" scheme="https://www.coder17.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="Shadowsocks" scheme="https://www.coder17.com/tags/Shadowsocks/"/>
    
    <category term="iptables" scheme="https://www.coder17.com/tags/iptables/"/>
    
  </entry>
  
</feed>
