<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码渣十七</title>
  <icon>https://www.coder17.com/images/favicon-32x32.png</icon>
  <subtitle>雑魚ーダーの雑魚メモ</subtitle>
  <link href="https://www.coder17.com/atom.xml" rel="self"/>
  
  <link href="https://www.coder17.com/"/>
  <updated>2021-02-21T11:48:00.000Z</updated>
  <id>https://www.coder17.com/</id>
  
  <author>
    <name>東城十七</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>下载 m3u8 推流</title>
    <link href="https://www.coder17.com/posts/m3u8-stream-download/"/>
    <id>https://www.coder17.com/posts/m3u8-stream-download/</id>
    <published>2021-02-21T11:48:00.000Z</published>
    <updated>2021-02-21T11:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在浏览器 Network 中查找 m3u8</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221204910267.png" alt="image-20210221204910267"></p></li><li><p>如果是上图所示嵌套，逐级打开对应 m3u8 文件，直到出现 ts 文件列表和密钥</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221205009425.png" alt="image-20210221205009425"></p></li><li><p>如果要先下载再合并，则观察 ts 文件 url 规律，使用 curl 批量下载文件</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://what-ever-[<span class="number">1</span>-<span class="number">999</span>].ts</span><br></pre></td></tr></table></figure></li><li><p>将 m3u8 文件下载到同一目录，并替换删除其中 url 前缀</p></li><li><p>按照 URI 参数值下载 m3u8 文件中的密钥 key 文件，应为16字节长度。同时改写 m3u8 文件中 key 路径使其指向此文件</p><p> <img src= "/images/loading.gif" data-lazy-src="/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B5%81/image-20210221205501863.png" alt="image-20210221205501863"></p></li><li><p>使用 ffmpeg 批量解密合并 ts 文件即可获得 mp4 视频</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -loglevel error -allowed_extensions ALL -i prog-index.m3u8 -c <span class="built_in">copy</span> &quot;output.mkv&quot;</span><br></pre></td></tr></table></figure></li><li><p>如果要直接下载，则不需要下载 ts 文件，直接用 ffmpeg 解密 m3u8 文件</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -loglevel error -protocol_whitelist file,http,https,tcp,tls,crypto -allowed_extensions ALL -i prog-index.m3u8 -c <span class="built_in">copy</span> &quot;output.mkv&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在浏览器 Network 中查找 m3u8&lt;/p&gt;
&lt;p&gt; &lt;img src= &quot;/images/loading.gif&quot; data-lazy-src=&quot;/blogimg/%E4%B8%8B%E8%BD%BD%20m3u8%20%E6%8E%A8%E6%B</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="m3u8" scheme="https://www.coder17.com/tags/m3u8/"/>
    
    <category term="推流" scheme="https://www.coder17.com/tags/%E6%8E%A8%E6%B5%81/"/>
    
    <category term="下载" scheme="https://www.coder17.com/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 USB 图标改变解决</title>
    <link href="https://www.coder17.com/posts/windows-10-usb-icon-fix/"/>
    <id>https://www.coder17.com/posts/windows-10-usb-icon-fix/</id>
    <published>2020-08-23T15:00:00.000Z</published>
    <updated>2020-08-23T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 的驱动服务器在 2019 年 11 月左右出现了一次 bug 导致所有的U盘图标均变为机柜，即使使用 <code>autorun.inf</code> 修改磁盘图标也无法生效，且单击弹出磁盘时，所有的设备名均变为 Device。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/20191110175553.png" alt="20191110175553"></p><p>原因是 Windows 会联网获取设备驱动与图标，因此服务器端问题会影响本机驱动。驱动服务器问题后来已经修复，但本机已经下载的 USB 驱动还在，因此问题会残留。解决方案是删除已缓存的驱动程序。</p><ul><li><p>打开 <code>C:\ProgramData\Microsoft\Windows\DeviceMetadataCache\dmrccache\en-us</code> 如果目录下有文件，寻找在其中 <code>DeviceInformation</code> 目录中含有 <code>ico2001.ico</code> 的机柜图标的目录，并删除该目录。</p></li><li><p>重启</p></li><li><p>如果没有恢复，或者上述目录中没有文件，则打开控制面板，设备和打印机，删除最下面的无法识别的 Device</p><p>  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824195700272.png" alt="image-20200824195700272"></p></li><li><p>重新插拔设备，应该可以恢复。此时查看上述目录，应该已经没有文件存在。弹出磁盘的菜单也应恢复显示设备名。</p><p>  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824195842372.png" alt="image-20200824195842372">  <img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%2010%20USB%20%E5%9B%BE%E6%A0%87%E6%94%B9%E5%8F%98%E8%A7%A3%E5%86%B3/image-20200824200746369.png" alt="image-20200824200746369"></p></li></ul><p>参考/图片：<a href="https://noushibou.hatenadiary.jp/entry/2019/11/10/101358">https://noushibou.hatenadiary.jp/entry/2019/11/10/101358</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows 的驱动服务器在 2019 年 11 月左右出现了一次 bug 导致所有的U盘图标均变为机柜，即使使用 &lt;code&gt;autorun.inf&lt;/code&gt; 修改磁盘图标也无法生效，且单击弹出磁盘时，所有的设备名均变为 Device。&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="图标" scheme="https://www.coder17.com/tags/%E5%9B%BE%E6%A0%87/"/>
    
    <category term="Windows 10" scheme="https://www.coder17.com/tags/Windows-10/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 普通用户环境变量不生效解决</title>
    <link href="https://www.coder17.com/posts/qnap-env-var/"/>
    <id>https://www.coder17.com/posts/qnap-env-var/</id>
    <published>2020-08-02T14:55:00.000Z</published>
    <updated>2020-08-02T14:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>内置 admin 用户的 home 位于 <code>/root</code> ，而新建用户的 home 位于 <code>/share/homes/USERNAME</code>。此目录缺乏各种 rc 文件。导致安装 opkg 等第三方工具时无法自动设置 path。</p><p>解决方案为使用普通用户登录 SSH 并定位到 home，然后把 root 目录里的各种配置文件软链接过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/.bash_logout .bash_logout</span><br><span class="line">ln -s /root/.bash_profile .bash_profile</span><br><span class="line">ln -s /root/.bashrc .bashrc</span><br><span class="line">ln -s /root/.profile .profile</span><br></pre></td></tr></table></figure><p>修改后普通用户的 prompt 也会变成 <code>#</code> ，非常迷惑，原因是 PS1 变量在 <code>.profile</code> 中被修改，<code>sudo vim .profile</code> 编辑该文件，注释掉第一行的修改语句即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export PS1=&#x27;[\w] # &#x27;</span></span><br><span class="line">reset</span><br><span class="line"><span class="built_in">source</span> /opt/etc/profile</span><br></pre></td></tr></table></figure><p>威联通的系统似乎没有考虑过建立普通用户日常使用的问题，默认思维模式都是使用内置 admin 账户完成，软件质量比较一般。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内置 admin 用户的 home 位于 &lt;code&gt;/root&lt;/code&gt; ，而新建用户的 home 位于 &lt;code&gt;/share/homes/USERNAME&lt;/code&gt;。此目录缺乏各种 rc 文件。导致安装 opkg 等第三方工具时无法自动设置 path。&lt;/p</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="环境变量" scheme="https://www.coder17.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker volume 备份与恢复</title>
    <link href="https://www.coder17.com/posts/docker-volume-backup/"/>
    <id>https://www.coder17.com/posts/docker-volume-backup/</id>
    <published>2020-07-29T10:16:00.000Z</published>
    <updated>2020-07-29T10:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/docker_run/--volumes-from.html">https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/docker_run/--volumes-from.html</a></p><p>使用 –volumes-from 创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --volumes-from aaa -v $(<span class="built_in">pwd</span>):/backup alpine tar zcvf /backup/aaa.tar.gz /&lt;path&gt;</span><br></pre></td></tr></table></figure><p>volumes-from 创建的容器其挂载的所有数据卷路径均与原容器相同，因此 <code>&lt;path&gt;</code> 改为原容器数据卷的挂载位置即可。</p><p>容器启动后，使用了 tar 命令来将 dbdata 卷备份为本地的 /backup/backup.tar。 如果要恢复数据到一个容器，首先创建一个带有数据卷的目标容器。（或者先创建空数据卷）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -v volume_name:/volume_mount_path --name target alpine /bin/ash</span><br></pre></td></tr></table></figure><p>然后创建另一个容器，挂载 dbdata2 的容器，并使用 untar 解压备份文件到挂载的容器卷中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --volumes-from target -v $(<span class="built_in">pwd</span>):/backup alpine tar zxvf /backup/aaa.tar.gz -C /</span><br></pre></td></tr></table></figure><p>其中 <code>-C /</code> 表示解压路径从根目录开始，从而确保路径和备份时完全对应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/docker_run/--volumes-from.html&quot;&gt;https://jiajially.gitbooks.i</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Docker" scheme="https://www.coder17.com/tags/Docker/"/>
    
    <category term="volume" scheme="https://www.coder17.com/tags/volume/"/>
    
    <category term="备份" scheme="https://www.coder17.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>华硕路由修改区域</title>
    <link href="https://www.coder17.com/posts/asus-region-mod/"/>
    <id>https://www.coder17.com/posts/asus-region-mod/</id>
    <published>2020-05-12T02:13:00.000Z</published>
    <updated>2020-05-12T02:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>必须安装 Merlin 固件。</p><p>控制国家码的部分在 CFE 不能修改，且 nvram 修改后重启系统/服务即失效。<br>因此加到系统启动和服务启动的脚本即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch /jffs/scripts/init-start</span><br><span class="line">ln -s /jffs/scripts/init-start /jffs/scripts/service-event</span><br><span class="line">chmod a+rx /jffs/scripts/*</span><br><span class="line">vi /jffs/scripts/init-start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">nvram <span class="built_in">unset</span> territory_code</span><br><span class="line">nvram <span class="built_in">set</span> location_code=JP</span><br><span class="line">nvram <span class="built_in">set</span> 0:ccode=JP</span><br><span class="line">nvram <span class="built_in">set</span> 1:ccode=JP</span><br><span class="line">nvram <span class="built_in">set</span> wl0_country_code=JP</span><br><span class="line">nvram <span class="built_in">set</span> wl1_country_code=JP</span><br></pre></td></tr></table></figure><p>并在 web 设置中 <code>Administration -&gt; System</code> 启用用户脚本。<br>其中 AA 为亚洲区，信号功率25，频段不全。需要其他频段时可设为 JP 或 TW。</p><p>然后在 Web 界面中重启路由器。</p><p>改好后语言菜单会解锁全部语言：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E4%BF%AE%E6%94%B9%E5%8C%BA%E5%9F%9F/image-20210421222345051.png" alt="image-20210421222345051"></p><p><a href="https://github.com/RMerl/asuswrt-merlin/wiki/User-scripts">User scripts · RMerl/asuswrt-merlin Wiki · GitHub</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;必须安装 Merlin 固件。&lt;/p&gt;
&lt;p&gt;控制国家码的部分在 CFE 不能修改，且 nvram 修改后重启系统/服务即失效。&lt;br&gt;因此加到系统启动和服务启动的脚本即可。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="华硕" scheme="https://www.coder17.com/tags/%E5%8D%8E%E7%A1%95/"/>
    
    <category term="路由器" scheme="https://www.coder17.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="Merlin" scheme="https://www.coder17.com/tags/Merlin/"/>
    
  </entry>
  
  <entry>
    <title>废物利用为 Galaxy S6 SM-G9200 刷入可用系统</title>
    <link href="https://www.coder17.com/posts/galaxy-s6-system/"/>
    <id>https://www.coder17.com/posts/galaxy-s6-system/</id>
    <published>2020-04-24T15:00:00.000Z</published>
    <updated>2020-04-24T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Galaxy S6 发布于2015年，中国大陆公开版是双卡单4G，初始系统版本 5.0。我将其作为备用机多年来一直使用当年自行修改的旧版 6.0 系统，时过境迁现在已兼容性较差。三星已经发布了7.0版本的系统更新，因此试图更新到最新版本的 offical 系统。但中国版系统阉割严重，且有大量中国毒瘤App，无法直接使用。</p><p>尝试 Odin 刷入港版系统，不管是四件套还是一体包，单刷还是全部，均会验证失败。查阅得知该型号虽然港版和中国（内地，下略）版均标示型号为<code>SM-G9200</code>，但港版机型代号为<code>zerofltezh</code>，中国版为<code>zerofltezc</code>，基带不同，港版不支持中国电信网络，因此无法混刷。</p><p>故底包只能采用中国版官方固件。在此基础上刷入 GApps 使手机可用。</p><h2 id="1-刷入完整系统"><a href="#1-刷入完整系统" class="headerlink" title="1. 刷入完整系统"></a>1. 刷入完整系统</h2><p>使用 <a href="https://samfirmtool.com/"><code>SamFirm</code></a> 下载最新版<code>CHC</code>区域固件四件套：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054145843.png" alt="image-20200425054145843"></p><p>使用最新版 <code>Odin</code> 刷入手机，重启，确认正常动作。</p><h2 id="2-刷入-CF-Auto-Root"><a href="#2-刷入-CF-Auto-Root" class="headerlink" title="2. 刷入  CF-Auto-Root"></a>2. 刷入  CF-Auto-Root</h2><p>在 <a href="https://desktop.firmware.mobi/">其网站主页</a> 输入型号G9200后，选择 <code>zerofltezc</code> 版本：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054507054.png" alt="image-20200425054507054"></p><p>点击最新固件，在其下载页面单击 Configure：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%BA%9F%E7%89%A9%E5%88%A9%E7%94%A8%E4%B8%BA%20Galaxy%20S6%20SM-G9200%20%E5%88%B7%E5%85%A5%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F/image-20200425054555517.png" alt="image-20200425054555517"></p><p>在配置选项中，<code>Installation type</code> 选择 <code>Systemless Image</code>，<code>Advanced Encryption Options</code> 中 <code>dm-verify</code> 选择 <code>Remove</code> ，其他保持默认，点击 <code>Generate</code> 生成刷机镜像，可能需要排队，且下载速度较慢。</p><p>下载后使用 Odin 在 AP 中刷入手机，重启，确认正常动作。</p><h2 id="3-刷入-Magisk"><a href="#3-刷入-Magisk" class="headerlink" title="3. 刷入 Magisk"></a>3. 刷入 Magisk</h2><p>SuperSU 作者已经弃坑不再更新，当前使用 <a href="https://github.com/topjohnwu/Magisk"><code>Magisk</code></a> 管理SU权限。但我们目前没有安装 custom recovery，故不使用 zip 包直接安装，而采用 patch 系统镜像并用 Odin 刷入的方式安装。</p><ol><li>在 GitHub Release 页面获取最新的 <code>Magisk Manager</code> 并安装。</li><li>使用 <code>7-zip</code> 打开 rom 四件套中的 AP 文件，解压其中 <code>boot.img</code> 并复制到手机中。</li><li>运行 <code>Magisk Manager</code> ，点击安装 Magisk，选择 Patch 镜像，并继续在文件浏览中选择刚才提取的 <code>boot.img</code>。（注：根据官方文档，可以选择 Patch boot 或者 recovery，但测试 recovery 不成功，故此处采用 boot）</li><li>将 patch 过后的 IMG 文件复制回电脑，更名为 <code>boot.img</code>，并使用 <code>7-zip</code> 等压缩软件打包为 tar 格式。</li><li>在 Odin 的 AP 中选中刚才打包的 tar 包，刷入手机。</li><li>重启，进入 <code>Magisk Manager</code> ，选择同意下载安装，再次重启后确认正常动作。</li></ol><h2 id="4-刷入修改版-TWRP-recovery"><a href="#4-刷入修改版-TWRP-recovery" class="headerlink" title="4. 刷入修改版 TWRP recovery"></a>4. 刷入修改版 TWRP recovery</h2><p>TWRP 没有正式提供 G9200 版本的支持。多年前 <a href="https://www.weibo.com/1649111590">Xiao1u</a> 曾提供过修改过的兼容版本 <code>G9200-PC1-TWRP-3.0-PC1-0324.tar</code> ，搜索即可获得，此版本对 7.0 系统的兼容不完美，有可能会导致 bootloop。参考 <a href="https://jtechboard.blogspot.com/2017/09/galaxy-s6-sm-g9200-china-model.html">J Tech board 的解决方案</a>，在确认 <code>dm-verify</code> 已关闭后，使用 Odin 刷入该文件。刷入时取消 Odin 中 Auto Reboot 的勾选。刷完后使用 Vol+ Home Pow 三键进入 recovery，什么都不做直接选择重启到系统，询问是否阻止系统还原 Recovery 时选择忽略。确认依然能正常进入系统。</p><h2 id="5-删除自带的中国-App-和字体等"><a href="#5-删除自带的中国-App-和字体等" class="headerlink" title="5. 删除自带的中国 App 和字体等"></a>5. 删除自带的中国 App 和字体等</h2><p>如果不删除，后面刷入 GApps 可能导致系统空间不足。即使删除后仍要使用，可以事后重新安装到用户空间。</p><p>安装 <a href="https://apkpure.com/jp/system-app-remover-root-needed/com.jumobile.manager.systemapp">System App Remover</a> 查看想要移除的内置应用，长按可以获得该应用的路径。使用 <a href="https://apkpure.com/solid-explorer-file-manager/pl.solidexplorer2">Solid Explorer</a> 定位并删除文件。</p><h2 id="6-刷入-Gapps"><a href="#6-刷入-Gapps" class="headerlink" title="6. 刷入 Gapps"></a>6. 刷入 Gapps</h2><p>在 <a href="https://opengapps.org/">OpenGapps</a> 的主页获得 zip 刷机包，传输至手机，重启至 TWRP 后选择刷入。注意此处如果直接刷入 7.0 系统对应的 nano 或者 pico 包，<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-497997441">会导致系统 WebView 被删除</a>，从而导致 Google 账户无法登录等问题，无法使用。</p><p>解决方案有两个思路，一是安装新的 Chrome WebView 替代被删除的原生 WebView，二是避免原生 WebView 被删除。经测试，即使安装Chrome 也仍然不能恢复该组件正常使用，可能三星对允许使用的 WebView 做了限制，或有其他兼容性问题。避免 WebView 被删除则可以通过<a href="https://github.com/opengapps/opengapps/wiki/Advanced-Features-and-Options">添加配置文件</a> ，或者<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-498086440">添加 package-overlay 重新编译</a> 等方法。这里使用相对比较简单的<a href="https://github.com/opengapps/opengapps/issues/724#issuecomment-612578593">修改安装脚本</a>方式完成。</p><p>下载 pico 版本 OpenGApps zip 包后，解压提取 <code>install.sh</code> 文件，搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> List of GApps files that should NOT be automatically removed as they are also included <span class="keyword">in</span> (many) ROMs removal_bypass_list</span></span><br></pre></td></tr></table></figure><p>并在其后的空引号内加入 <code>WebViewGoogle</code>，保存退出，将修改后的文件压入 zip 包，重启手机进入 TWRP 刷入即可。</p><p>刷好后清空缓存，进入系统开发者模式，查看 “实装的 WebView” 选项不为空，即可。推荐重启手机，双清后从向导开始重新初始化系统，避免谷歌系列服务出现授权问题。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>避免购买在中国大陆境内售卖的任何具有中国定制 Rom 的电子产品（包括无线耳机等具有中国区定制 Firmware 的产品），并 7x24 连接<strong>全球互联网</strong>，和全球大多数国家和地区的用户保持类似的软件使用习惯，可以避免绝大多数的烦恼。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Galaxy S6 发布于2015年，中国大陆公开版是双卡单4G，初始系统版本 5.0。我将其作为备用机多年来一直使用当年自行修改的旧版 6.0 系统，时过境迁现在已兼容性较差。三星已经发布了7.0版本的系统更新，因此试图更新到最新版本的 offical 系统。但中国版系统</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="Android" scheme="https://www.coder17.com/tags/Android/"/>
    
    <category term="Galaxy S6" scheme="https://www.coder17.com/tags/Galaxy-S6/"/>
    
    <category term="SM-G9200" scheme="https://www.coder17.com/tags/SM-G9200/"/>
    
    <category term="刷机" scheme="https://www.coder17.com/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux MAC 地址伪装</title>
    <link href="https://www.coder17.com/posts/linux-mac-faking/"/>
    <id>https://www.coder17.com/posts/linux-mac-faking/</id>
    <published>2020-04-06T09:01:00.000Z</published>
    <updated>2020-04-06T09:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wiki.archlinux.jp/index.php/MAC_%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E5%81%BD%E8%A3%85#.E6.96.B9.E6.B3.95_1:_systemd-networkd">https://wiki.archlinux.jp/index.php/MAC_アドレス偽装#.E6.96.B9.E6.B3.95_1:_systemd-networkd</a></p><p>Tested on Ubuntu 18.04 LTS</p><p>创建系统服务，每次开机时使用 ip link set 修改 mac 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/macspoof@.service</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MAC Address Change %I</span><br><span class="line"><span class="attr">Wants</span>=network-pre.target</span><br><span class="line"><span class="attr">Before</span>=network-pre.target</span><br><span class="line"><span class="attr">BindsTo</span>=sys-subsystem-net-devices-%i.device</span><br><span class="line"><span class="attr">After</span>=sys-subsystem-net-devices-%i.device</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="literal">on</span>eshot</span><br><span class="line"><span class="attr">ExecStart</span>=/sbin/ip link set dev %i address <span class="number">90</span>:<span class="number">2</span>b:<span class="number">34</span>:d2:<span class="number">15</span>:<span class="number">25</span></span><br><span class="line"><span class="attr">ExecStart</span>=/sbin/ip link set dev %i up</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> macspoof@eth0.service</span><br></pre></td></tr></table></figure><p>已知问题：有时涉及网络的重启（推测如 docker）会导致失效。此时需要重启服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service macspoof@eno2 restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.jp/index.php/MAC_%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E5%81%BD%E8%A3%85#.E6.96.B9.E6.B3.95_1:_systemd-net</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="MAC 地址伪装" scheme="https://www.coder17.com/tags/MAC-%E5%9C%B0%E5%9D%80%E4%BC%AA%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 硬盘不休眠解决</title>
    <link href="https://www.coder17.com/posts/qnap-hdd-wont-sleep/"/>
    <id>https://www.coder17.com/posts/qnap-hdd-wont-sleep/</id>
    <published>2020-03-18T23:33:00.000Z</published>
    <updated>2020-03-18T23:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-系统-raid-结构"><a href="#0-系统-raid-结构" class="headerlink" title="0. 系统 raid 结构"></a>0. 系统 raid 结构</h2><p>使用 <code>cat /proc/mdstat</code> 可以查看所有 raid 卷。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Personalities</span> :<span class="meta"> [linear] [raid0] [raid1] [raid10] [raid6] [raid5] [raid4] [multipath]</span></span><br><span class="line"><span class="attribute">md3</span> : active raid<span class="number">1</span> sdc<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">3897063616</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md2</span> : active raid<span class="number">1</span> sda<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">7804071616</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md1</span> : active raid<span class="number">1</span> sdb<span class="number">3</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">392120832</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [1/1] [U]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">md322</span> : active raid<span class="number">1</span> sda<span class="number">5</span>[<span class="number">1</span>] sdc<span class="number">5</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="attribute">7235136</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/2] [UU]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md256 : active raid1 sda2[1] sdc2[0]</span></span><br><span class="line">      <span class="attribute">530112</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/2] [UU]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md321 : active raid1 sdb5[0]</span></span><br><span class="line">      <span class="attribute">8283712</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [2/1] [U_]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">0</span>/<span class="number">1</span> pages<span class="meta"> [0KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md13 : active raid1 sda4[0] sdc4[33] sdb4[32]</span></span><br><span class="line">      <span class="attribute">458880</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [32/3] [UUU_____________________________]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">1</span>/<span class="number">1</span> pages<span class="meta"> [4KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">md9 : active raid1 sda1[0] sdc1[33] sdb1[32]</span></span><br><span class="line">      <span class="attribute">530048</span> blocks super <span class="number">1</span>.<span class="number">0</span><span class="meta"> [32/3] [UUU_____________________________]</span></span><br><span class="line">      <span class="attribute">bitmap</span>: <span class="number">1</span>/<span class="number">1</span> pages<span class="meta"> [4KB], 65536KB chunk</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">unused devices: &lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>注意到 md9 md13 md322 md256 均是横跨了机械硬盘的 raid 卷。搜索后得知 md9 和 md13 是系统自动创建的跨所有硬盘的 raid1 数据卷，存储系统配置和目录等。md322 和 md256 是系统 swap 分区。</p><h2 id="1-系统分区-raid-反复读取"><a href="#1-系统分区-raid-反复读取" class="headerlink" title="1. 系统分区 raid 反复读取"></a>1. 系统分区 raid 反复读取</h2><p>使用 <a href="https://drive.google.com/file/d/0B8u8qWRYVhv0S1ozWFRjazFEX1E/view">blkdevMonitor.sh</a> 脚本查看硬盘读写，可以看到大量 md9 相关读取。因此首先处理 md9 和 md13。</p><p>使用 <code>parted /dev/sdb print</code> 命令查看各硬盘，通过容量判断 sdb 是 SSD，sda 和 sdc 是两块机械硬盘。因此将 SSD 以外的硬盘从阵列中踢出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disconnecting md9&quot;</span></span><br><span class="line">mdadm /dev/md9 --fail /dev/sda1</span><br><span class="line">mdadm /dev/md9 --fail /dev/sdc1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disconnecting md13&quot;</span></span><br><span class="line">mdadm /dev/md13 --fail /dev/sda4</span><br><span class="line">mdadm /dev/md13 --fail /dev/sdc4</span><br></pre></td></tr></table></figure><p>使用 <code>mdadm -D /dev/md9</code> 验证移除是否成功</p><p>然后使用 <code>hdparm -y /dev/sda</code> 立即休眠硬盘，并使用 <code>hdparm -C /dev/sda</code>查看硬盘状态，<code>active/idle</code> 或者 <code>standby</code></p><p>但断开连接时万一系统盘损坏，则系统数据会丢失，因此每天同步一次。使用下列脚本恢复连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Re-adding md9&quot;</span></span><br><span class="line">mdadm /dev/md9 --re-add /dev/sda1</span><br><span class="line">mdadm /dev/md9 --re-add /dev/sdc1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Re-adding md13&quot;</span></span><br><span class="line">mdadm /dev/md13 --re-add /dev/sda4</span><br><span class="line">mdadm /dev/md13 --re-add /dev/sdc4</span><br></pre></td></tr></table></figure><p>保存上述两个脚本后（记得添加 x 权限），使用 crontab 每天运行一次，加回去15分钟后断开连接，应足够其完成同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> 15 0 \* \* \* /share/homes/Tojo/rebuild_internal_raid.sh &gt;&gt; /etc/config/crontab</span><br><span class="line">sudo <span class="built_in">echo</span> 30 0 \* \* \* /share/homes/Tojo/disconnect_internal_raid.sh &gt;&gt; /etc/config/crontab</span><br><span class="line">sudo crontab /etc/config/crontab &amp;&amp; sudo /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>并修改启动脚本使其自动生效。</p><h2 id="2-swap-分区"><a href="#2-swap-分区" class="headerlink" title="2. swap 分区"></a>2. swap 分区</h2><p>使用 <code>cat /proc/swaps</code> 查看系统 swap 分区，发现很诡异地两个 swap 都建立在机械硬盘上。</p><p>但目前看起来不是很影响休眠，就先不管他了。</p><p>参考：</p><p><a href="https://forum.qnap.com/viewtopic.php?f=55&t=130788">Advanced guide to how I completely silenced my TS-453A - QNAP NAS Community Forum</a></p><p><a href="https://forum.qnap.com/viewtopic.php?t=114286">md clarification please_ - QNAP NAS Community Forum</a></p><p><a href="https://wiki.qnap.com/wiki/Find_out_which_process_prevents_the_hard_drives_from_spindown">Find out which process prevents the hard drives from spindown - QNAPedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-系统-raid-结构&quot;&gt;&lt;a href=&quot;#0-系统-raid-结构&quot; class=&quot;headerlink&quot; title=&quot;0. 系统 raid 结构&quot;&gt;&lt;/a&gt;0. 系统 raid 结构&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;cat /proc/mdstat&lt;/c</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="硬盘" scheme="https://www.coder17.com/tags/%E7%A1%AC%E7%9B%98/"/>
    
    <category term="休眠" scheme="https://www.coder17.com/tags/%E4%BC%91%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 添加定时任务</title>
    <link href="https://www.coder17.com/posts/qnap-crontab/"/>
    <id>https://www.coder17.com/posts/qnap-crontab/</id>
    <published>2020-03-18T23:31:00.000Z</published>
    <updated>2020-03-18T23:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/config/crontab</span><br><span class="line">sudo crontab -l</span><br><span class="line">crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>记得把要运行的命令属性 +x</p><p>参考：</p><p><a href="https://wiki.qnap.com/wiki/Add_items_to_crontab">Add items to crontab</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="crontab" scheme="https://www.coder17.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 修改 sudoers</title>
    <link href="https://www.coder17.com/posts/qnap-mod-sudoers/"/>
    <id>https://www.coder17.com/posts/qnap-mod-sudoers/</id>
    <published>2020-03-15T19:50:00.000Z</published>
    <updated>2020-03-15T19:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>威联通 NAS 默认 sudoers 仅包括内置 admin 账户，修改时需要编辑 <code>/usr/etc/sudoers</code> 文件。</p><p>但 <code>/usr/etc</code> 目录中的编辑在重启后均会复原。因此需要在<code>系统设置-&gt;硬件</code>中打开允许 <code>autorun.sh</code> 运行选项，并且编辑该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">vim /tmp/config/autorun.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mkdir -p /usr/etc/sudoers.d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Tojo ALL=(ALL) ALL&quot;</span> &gt; /usr/etc/sudoers.d/Tojo</span><br></pre></td></tr></table></figure><p>如此即可在重启后自动修改 sudoers。如果直接向 <code>/usr/etc/sudoers</code> 末尾写入配置的话，由于该配置文件最后一行为 include 命令，因此会导致在此之后写入的配置无法生效。因此选择向其加载的配置目录中写入新文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;威联通 NAS 默认 sudoers 仅包括内置 admin 账户，修改时需要编辑 &lt;code&gt;/usr/etc/sudoers&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;但 &lt;code&gt;/usr/etc&lt;/code&gt; 目录中的编辑在重启后均会复原。因此需要在&lt;code&gt;系统设置</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="sudoers" scheme="https://www.coder17.com/tags/sudoers/"/>
    
  </entry>
  
  <entry>
    <title>QNAP 添加启动项</title>
    <link href="https://www.coder17.com/posts/qnap-startup/"/>
    <id>https://www.coder17.com/posts/qnap-startup/</id>
    <published>2020-03-12T18:04:00.000Z</published>
    <updated>2020-03-12T18:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>系统设置-&gt;硬件</code>中打开允许 <code>autorun.sh</code> 运行选项，并且编辑该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">or sudo mount $(sudo /sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line">vim /tmp/config/autorun.sh</span><br></pre></td></tr></table></figure><p>必须添加 shebang，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://wiki.qnap.com/wiki/Running_Your_Own_Application_at_Startup">Running Your Own Application at Startup</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在&lt;code&gt;系统设置-&amp;gt;硬件&lt;/code&gt;中打开允许 &lt;code&gt;autorun.sh&lt;/code&gt; 运行选项，并且编辑该文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="QNAP" scheme="https://www.coder17.com/tags/QNAP/"/>
    
    <category term="启动项" scheme="https://www.coder17.com/tags/%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    
    <category term="autorun" scheme="https://www.coder17.com/tags/autorun/"/>
    
  </entry>
  
  <entry>
    <title>华硕路由添加 DDNS 服务</title>
    <link href="https://www.coder17.com/posts/asus-ddns/"/>
    <id>https://www.coder17.com/posts/asus-ddns/</id>
    <published>2020-03-04T17:05:00.000Z</published>
    <updated>2020-03-04T17:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>以 dockdns 为例，必须安装 Merlin 固件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /jffs/scripts/ddns-start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># register a subdomain at https://www.duckdns.org/ to get your token</span></span><br><span class="line">SUBDOMAIN=<span class="string">&quot;your_subdomain&quot;</span></span><br><span class="line">TOKEN=<span class="string">&quot;your-token&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># no modification below needed</span></span><br><span class="line">curl --silent <span class="string">&quot;https://www.duckdns.org/update?domains=<span class="variable">$SUBDOMAIN</span>&amp;token=<span class="variable">$TOKEN</span>&amp;ip=<span class="variable">$1</span>&quot;</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    /sbin/ddns_custom_updated 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    /sbin/ddns_custom_updated 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+rx /jffs/scripts/*</span><br></pre></td></tr></table></figure><p>并在 web 设置中 <code>Administration -&gt; System</code> 启用用户脚本，在 <code>WAN -&gt; DDNS -&gt; DDNS Service</code> 中设置为<code>custom</code> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以 dockdns 为例，必须安装 Merlin 固件。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    <category term="Hacking" scheme="https://www.coder17.com/categories/Hacking/"/>
    
    
    <category term="华硕" scheme="https://www.coder17.com/tags/%E5%8D%8E%E7%A1%95/"/>
    
    <category term="路由器" scheme="https://www.coder17.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="Merlin" scheme="https://www.coder17.com/tags/Merlin/"/>
    
    <category term="DDNS" scheme="https://www.coder17.com/tags/DDNS/"/>
    
  </entry>
  
  <entry>
    <title>安装 mosh 与 byobu</title>
    <link href="https://www.coder17.com/posts/install-mosh-byobu/"/>
    <id>https://www.coder17.com/posts/install-mosh-byobu/</id>
    <published>2019-11-24T13:02:00.000Z</published>
    <updated>2019-11-24T13:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-mosh"><a href="#1-mosh" class="headerlink" title="1 mosh"></a>1 mosh</h2><p>在延迟过高的服务器上操作时，使用 mosh 来通过 UDP 连接加强体验。甚至网络中断后重连或系统休眠后仍能维持连接。<br>默认使用 60000 以上端口，一个 UDP 只能有一个连接。<br>此处配置成和 ssh 使用相同端口来方便连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mosh</span><br></pre></td></tr></table></figure><p>连接时： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosh -p &lt;mosh port&gt; --ssh=<span class="string">&#x27;ssh -p &lt;ssh port&gt;&#x27;</span> &lt;user&gt;@&lt;server address&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-WinSCP-中使用-mosh"><a href="#1-1-WinSCP-中使用-mosh" class="headerlink" title="1.1 WinSCP 中使用 mosh"></a>1.1 WinSCP 中使用 mosh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosh -p !<span class="comment"># --ssh=&#x27;ssh -p !#&#x27; !U@!@</span></span><br></pre></td></tr></table></figure><h3 id="1-2-端口转发注意点"><a href="#1-2-端口转发注意点" class="headerlink" title="1.2 端口转发注意点"></a>1.2 端口转发注意点</h3><p>因为 mosh 所使用的端口是客户端连接时指定的，所以不能转发到不同的端口。<br>比如通过把服务器的 60001 UDP 转发到 50001，再使用 mosh -p 50001，是无法连接的。<br>需要转发到相同端口连接。<br>为避免麻烦，使用与转发的 ssh TCP 端口相同的端口即可。</p><h2 id="2-byobu"><a href="#2-byobu" class="headerlink" title="2 byobu"></a>2 byobu</h2><p>mosh 单一端口只支持一个连接，所以要多线操作时不方便使用多连接的方式，因此需要分屏操作。<br>tmux 快捷键十分反人类，难以记忆，得不偿失。虽然可以修改，但往往使用 docker 或公用服务器时一一修改非常麻烦。<br>因此选择默认快捷键适合人类使用的 byobu。byobu 是日语びょうぶ屏風。<br>byobu 可以选择基于 tmux 后端还是 screen 后端。使用 <code>byobu-select-backend</code> 进行切换。<br>一般 ubuntu 会内置 byobu，非常方便。</p><h3 id="2-1-快捷键"><a href="#2-1-快捷键" class="headerlink" title="2.1 快捷键"></a>2.1 快捷键</h3><p>F2 新建 Window， F3 F4 移动到 Window<br>Shift F2 上下分割，Ctrl F2 左右分割<br>Shift F3 F4 移动到分屏，Ctrl F6 关闭当前分屏<br>Shift + 方向键 移动到分屏<br>F5 重载配置文件，Shift F5 似乎是切换状态栏<br>F6 Detach session<br>F7 滚动模式，按 pgup pgdn 滚屏，回车退出<br>Alt + pgup/pgdn 直接滚屏<br>F8 修改 Window 名<br>F9 配置，Shift + F12 切换F键有效性<br>Shift + F11 最大化当前窗口</p><h3 id="2-2-时间换行问题"><a href="#2-2-时间换行问题" class="headerlink" title="2.2 时间换行问题"></a>2.2 时间换行问题</h3><p>有时状态栏最后一位时间会换行，导致状态栏错位。这是因为当前终端字体不支持系统 logo 的特殊字符显示。按 F9 进配置，选择 <code>Toggle status notifications</code>，去掉 logo，Apply 即可。</p><h3 id="2-3-提示符风格"><a href="#2-3-提示符风格" class="headerlink" title="2.3 提示符风格"></a>2.3 提示符风格</h3><p>默认配色不是默认配色，使用 <code>byobu-disable-prompt</code> 恢复默认。</p><h3 id="2-4-256色不支持"><a href="#2-4-256色不支持" class="headerlink" title="2.4 256色不支持"></a>2.4 256色不支持</h3><p>部分版本切换到默认配色时会不支持 256 色，<code>echo $TERM</code> 返回 <code>screen</code>。<br>这是默认 tmux 配置的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="variable">$BYOBU_PREFIX</span>/share/byobu/profiles/tmux</span><br></pre></td></tr></table></figure><p>查找 <code>set -g default-terminal &quot;screenr&quot;</code> 修改为 <code>set -g default-terminal &quot;screen-256color&quot;</code></p><h3 id="2-5-支持滚轮和鼠标"><a href="#2-5-支持滚轮和鼠标" class="headerlink" title="2.5 支持滚轮和鼠标"></a>2.5 支持滚轮和鼠标</h3><p>Alt + F12 切换鼠标支持</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%AE%89%E8%A3%85%20mosh%20%E4%B8%8E%20byobu/image-20210421235258827.png" alt="image-20210421235258827"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-mosh&quot;&gt;&lt;a href=&quot;#1-mosh&quot; class=&quot;headerlink&quot; title=&quot;1 mosh&quot;&gt;&lt;/a&gt;1 mosh&lt;/h2&gt;&lt;p&gt;在延迟过高的服务器上操作时，使用 mosh 来通过 UDP 连接加强体验。甚至网络中断后重连或系统休眠后仍能</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="mosh" scheme="https://www.coder17.com/tags/mosh/"/>
    
    <category term="byobu" scheme="https://www.coder17.com/tags/byobu/"/>
    
  </entry>
  
  <entry>
    <title>Windows 远程投屏方案</title>
    <link href="https://www.coder17.com/posts/remote-control/"/>
    <id>https://www.coder17.com/posts/remote-control/</id>
    <published>2019-11-14T12:25:00.000Z</published>
    <updated>2019-11-14T12:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Windows-gt-Android"><a href="#1-Windows-gt-Android" class="headerlink" title="1 Windows-&gt;Android"></a>1 Windows-&gt;Android</h2><h3 id="1-1-VNC-协议"><a href="#1-1-VNC-协议" class="headerlink" title="1.1 VNC 协议"></a>1.1 VNC 协议</h3><p>使用 <a href="https://play.google.com/store/apps/details?id=com.realvnc.viewer.android">VNC Viewer</a></p><p>优点：</p><ul><li>   屏幕没有工具栏</li></ul><p>缺点：</p><ul><li>   需要鼠标操作，不能用键盘/遥控器定位</li><li>   间歇性断线</li><li>   没有声音</li></ul><h3 id="1-2-RDP-协议"><a href="#1-2-RDP-协议" class="headerlink" title="1.2 RDP 协议"></a>1.2 RDP 协议</h3><p>使用 <a href="https://play.google.com/store/apps/details?id=com.devolutions.remotedesktopmanager">Remote Desktop Manager</a></p><p>优点：</p><ul><li>   键盘可以操作</li><li>   稳定</li><li>   有声音</li></ul><p>缺点：</p><ul><li>第一次创建连接需要用鼠标点</li><li>工具栏需要操作才能消去</li></ul><h3 id="1-3-向日葵软件"><a href="#1-3-向日葵软件" class="headerlink" title="1.3 向日葵软件"></a>1.3 向日葵软件</h3><p>使用 <a href="https://sunlogin.oray.com/zh_CN/remote/screen">远程投屏-向日葵</a></p><p>优点：</p><ul><li>暂缺</li></ul><p>缺点：</p><ul><li>依赖公网</li><li>依赖第三方服务</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Windows-gt-Android&quot;&gt;&lt;a href=&quot;#1-Windows-gt-Android&quot; class=&quot;headerlink&quot; title=&quot;1 Windows-&amp;gt;Android&quot;&gt;&lt;/a&gt;1 Windows-&amp;gt;Android&lt;/h2</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://www.coder17.com/tags/Windows/"/>
    
    <category term="投屏" scheme="https://www.coder17.com/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="远程控制" scheme="https://www.coder17.com/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu VPS 上引导 iso 安装纯净系统</title>
    <link href="https://www.coder17.com/posts/vps-boot-from-iso/"/>
    <id>https://www.coder17.com/posts/vps-boot-from-iso/</id>
    <published>2019-09-19T15:00:00.000Z</published>
    <updated>2019-09-19T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>租用 VPS 厂商的机器时，一般只能预装厂商原有的镜像。有时镜像并不纯净，厂商会在里面加料。因此需要安装原版系统。下面以腾讯云重新安装 Ubuntu 18.04 LTS 为例。</p><h2 id="1-检测系统环境"><a href="#1-检测系统环境" class="headerlink" title="1. 检测系统环境"></a>1. 检测系统环境</h2><h3 id="1-1-确定系统有-grub"><a href="#1-1-确定系统有-grub" class="headerlink" title="1.1 确定系统有 grub"></a>1.1 确定系统有 grub</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="1-2-确认分区布局"><a href="#1-2-确认分区布局" class="headerlink" title="1.2 确认分区布局"></a>1.2 确认分区布局</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看 <code>/</code>  和 <code>/boot</code> 目录是否在不同分区。如果仅有根目录，处理较为容易，否则在后续步骤中需要注意。</p><h2 id="2-下载系统镜像"><a href="#2-下载系统镜像" class="headerlink" title="2. 下载系统镜像"></a>2. 下载系统镜像</h2><p>注意：Ubuntu 如果使用常规 iso，安装会报错，因此使用网络安装版（Network installer）的iso。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /boot/isoboot.iso http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso</span><br></pre></td></tr></table></figure><h2 id="3-准备-Memdisk"><a href="#3-准备-Memdisk" class="headerlink" title="3. 准备 Memdisk"></a>3. 准备 Memdisk</h2><p>原理是将 iso 镜像读入内存。使用 apt 安装 Syslinux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install syslinux -y</span><br></pre></td></tr></table></figure><p>复制 memdisk 文件到引导目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -f /usr/lib/syslinux/memdisk /boot/memdisk</span><br></pre></td></tr></table></figure><h2 id="4-修改-Grub-引导"><a href="#4-修改-Grub-引导" class="headerlink" title="4. 修改 Grub 引导"></a>4. 修改 Grub 引导</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/grub.d/41_custom</span><br></pre></td></tr></table></figure><p>插入以下内容到 EOF 之前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">menuentry &#x27;OS Web Install&#x27; &#123;</span><br><span class="line">    insmod part_msdos</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod ext2</span><br><span class="line">    set root=(hd0,msdos1)</span><br><span class="line">    echo &#x27;Loading memdisk ...&#x27;</span><br><span class="line">    linux16 /boot/memdisk raw iso</span><br><span class="line">    echo &#x27;Loading ISO ...&#x27;</span><br><span class="line">    initrd16 /boot/isoboot.iso</span><br><span class="line">    echo &#x27;Booting ISO ...&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，此处根据刚才分析分区布局时候的结果而有所不同：</p><blockquote><ul><li>如果你的服务器是单块硬盘，而且只有一个分区，那么root的值为 <strong>(hd0,msdos1)</strong></li><li>如果你的服务器的单块硬盘，存在不止一个分区，看 /boot 分区在哪个盘上，比如在 /dev/vda5 上，那就是 <strong>(hd0,msdos5)</strong></li><li>其他更复杂的情况，重启服务器，到达 Grub 界面时按下 <strong>C</strong> 键，进入 Grub 命令行，并按照以下步骤操作：</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls</span></span><br><span class="line">(hd0) (hd0,msdos1) (hd0,msdos5)</span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls (hd0,msdos1)/</span></span><br><span class="line">error: unknown filesystem. # 说明这个分区不是正确的启动分区，继续尝试</span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"> ls (hd0,msdos5)/</span></span><br><span class="line">lost+found/ etc/ (各种文件夹) # 说明这个分区是正确的启动分区</span><br><span class="line"></span><br><span class="line">reboot #回到系统</span><br></pre></td></tr></table></figure><p>修改 <code>/etc/default/grub</code> 配置文件增大 <code>GRUB_TIMEOUT</code> 超时时间，然后更新 Grub 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>之后确认是否正确写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="5-备份配置"><a href="#5-备份配置" class="headerlink" title="5. 备份配置"></a>5. 备份配置</h2><p>备份网络配置等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure><h2 id="6-重装"><a href="#6-重装" class="headerlink" title="6. 重装"></a>6. 重装</h2><p>重启，使用 VNC 连接，启动时选择 <strong>OS Web Install</strong> 并操作重装。</p><p>因为使用的是最小镜像，需要联网下载大量安装包，过程可能比较漫长，耐心等待即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/%E5%9C%A8%20Ubuntu%20%E4%B8%8A%E5%BC%95%E5%AF%BC%20iso/image-20210421212105375.png" alt="image-20210421212105375"></p><hr><p>参考：</p><p><a href="https://blog.ilemonrain.com/linux/grub-memdisk-boot-iso.html">https://blog.ilemonrain.com/linux/grub-memdisk-boot-iso.html</a></p><p><a href="https://www.imbeee.com/2017/12/10/install-pure-system-on-vps-and-encrypt-it/">https://www.imbeee.com/2017/12/10/install-pure-system-on-vps-and-encrypt-it/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;租用 VPS 厂商的机器时，一般只能预装厂商原有的镜像。有时镜像并不纯净，厂商会在里面加料。因此需要安装原版系统。下面以腾讯云重新安装 Ubuntu 18.04 LTS 为例。&lt;/p&gt;
&lt;h2 id=&quot;1-检测系统环境&quot;&gt;&lt;a href=&quot;#1-检测系统环境&quot; class=</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="VPS" scheme="https://www.coder17.com/tags/VPS/"/>
    
    <category term="Ubuntu" scheme="https://www.coder17.com/tags/Ubuntu/"/>
    
    <category term="腾讯云" scheme="https://www.coder17.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    <category term="引导 iso" scheme="https://www.coder17.com/tags/%E5%BC%95%E5%AF%BC-iso/"/>
    
  </entry>
  
  <entry>
    <title>不装 VS Windows Terminal 编译 msxi 自签名安装</title>
    <link href="https://www.coder17.com/posts/msxi-sign-install/"/>
    <id>https://www.coder17.com/posts/msxi-sign-install/</id>
    <published>2019-06-15T15:00:00.000Z</published>
    <updated>2019-06-15T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Terminal 一直没有发布可以直接安装的二进制文件，想自行编译的时候，看到系统需求中包含体积巨大的 Visual Studio 和 Windows SDK，脑袋都大了。直接下载其他人编译好的安装包又不放心，那么就想个办法避免在本地环境编译吧。</p><h2 id="1-编译结果获取"><a href="#1-编译结果获取" class="headerlink" title="1. 编译结果获取"></a>1. 编译结果获取</h2><p>首先想到 Azure DevOps，这个可以简单理解成微软提供的在线 CI 平台，写好编译文件就可以调用微软的自带所有编译环境的镜像直接在线编译，并生成二进制下载。这个服务可以使用 edu 教育账号免费使用，有 edu 邮箱的都可以用。我曾经使用这个编译过其他人久不更新的 MFC 项目。自己写一个 ，或者修改微软生成的 <code>azure-pipelines.yml</code> 即可。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678181063.png" alt="1560678181063"></p><p>那么就从 GitHub 上把微软的代码拿过来，再写个 pipeline 直接编译吧。这时注意到，GitHub 上的项目中，居然已经包含了写好的 pipeline。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678325392.png" alt="1560678325392"></p><p>想了想也是自然，微软写的东西当然自己也会用 Azure DevOps 啊。</p><p>接下来注意到，在 GitHub 仓库的 Readme 中，已经有 Azure Pipelines 的编译结果图标了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678474529.png" alt="1560678474529"></p><p>单击图标，打开软的 DevOps 仓库，可见每次 push 代码都是会自动编译的。进一步分析发现，只有合并到 master 分支时会编译出二进制文件。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678578167.png" alt="1560678578167"></p><p>那么我们选择其中一个 master 分支的 CI job：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678636549.png" alt="1560678636549"></p><p>可以看到，右上角有 Artifacts 按钮，说明这个 CI 是会上传编译出来的二进制文件到服务器的。不清楚这三个有什么区别，我起初以为分别对应 x64、x86 和 arm64 的编译结果，但我下载第一个压缩包中，是包含了三个平台的编译结果的。压缩包很大，150多M，内容如下：</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678772276.png" alt="1560678772276"></p><p>其中的 <code>CascadiaPackage_0.0.1.0_x64.msix</code> 就是我们要的二进制安装包。</p><h2 id="2-安装尝试"><a href="#2-安装尝试" class="headerlink" title="2. 安装尝试"></a>2. 安装尝试</h2><p>首先把系统调成开发者模式。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560678844942.png" alt="1560678844942"></p><p>然后双击 msix 文件直接安装，发现安装失败，提示安装包没有签名。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679034249.png" alt="1560679034249"></p><p>一番搜索之后，发现如果使用 VS 在本机直接部署，VS 会自动帮你签名。如果使用 VS 命令行工具直接编译出来的结果，是没有签名的。</p><p>在 GitHub 仓库的一个 <a href="https://github.com/microsoft/Terminal/issues/489#issuecomment-496170540">issue</a> 中有人提到，需要用 <code>SignTool.exe</code> 来为这个安装包签名。</p><h2 id="3-证书生成"><a href="#3-证书生成" class="headerlink" title="3. 证书生成"></a>3. 证书生成</h2><p>签名首先需要一个证书。在这里我们直接自签发一个证书并添加信任就行了。参考刚才的 issue 中提到的脚本，打开管理员权限的 Power Shell ，并 cd 到 msix 安装包所在目录中，执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-SelfSignedCertificate</span> <span class="literal">-Type</span> Custom <span class="literal">-Subject</span> <span class="string">&quot;CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span> <span class="literal">-KeyUsage</span> DigitalSignature <span class="literal">-FriendlyName</span> <span class="string">&quot;WindowsTerminal&quot;</span> <span class="literal">-CertStoreLocation</span> <span class="string">&quot;Cert:\LocalMachine\My&quot;</span> <span class="literal">-TextExtension</span> <span class="selector-tag">@</span>(<span class="string">&quot;2.5.29.37=&#123;text&#125;1.3.6.1.5.5.7.3.3&quot;</span>, <span class="string">&quot;2.5.29.19=&#123;text&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时会显示一个证书指纹，复制其中指纹并替换掉下面命令中的 <code>C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF</code>，同时修改命令中的密码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="literal">-String</span> <span class="string">&quot;随便设置一个密码&quot;</span> <span class="literal">-Force</span> <span class="literal">-AsPlainText</span></span><br><span class="line"><span class="built_in">Export-PfxCertificate</span> <span class="literal">-cert</span> <span class="string">&quot;Cert:\LocalMachine\My\C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF&quot;</span> <span class="literal">-FilePath</span> WindowsTerminal.pfx <span class="literal">-Password</span> <span class="variable">$password</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Path</span> <span class="string">&quot;Cert:\LocalMachine\My\C5C9D98CE9A23FB72C20B4D039876F3D93C3E1FF&quot;</span></span><br></pre></td></tr></table></figure><p>此时当前目录会生成一个 <code>WindowsTerminal.pfx</code> 证书。双击之，安装到计算机存储的受信任人（Trusted People）目录中，中间会要你输入刚才脚本里设置的密码。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679602449.png" alt="1560679602449"></p><p>好了，证书搞定了。</p><h2 id="4-提取安装签名工具"><a href="#4-提取安装签名工具" class="headerlink" title="4. 提取安装签名工具"></a>4. 提取安装签名工具</h2><p>下面使用  <code>SignTool.exe</code> 工具进行签名。这个工具是 <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk">Windows 10 SDK</a> 中的一个工具。去微软网站查看发现，这货体积巨大，包含了许多开发 Windows 所需的工具包。但我们并不需要其他的部分，所以这里投机取巧一下，只安装所需的部分。</p><p>首先要下载 ISO 格式的安装镜像，不要直接下 Installer。大概 800M 左右，半夜直连下载速度飞快，白天就不行了，视情况使用更加科学的上网方式。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679726239.png" alt="1560679726239"></p><p>下好之后，使用 Windows 自带的 Mount 功能映射为虚拟光驱。打开 <code>Installers</code> 目录，找到 <code>Windows App Certification Kit x64-x86_en-us.msi</code> 这个包，双击安装。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560679991475.png" alt="1560679991475"></p><p>这个工具包就包含了我们需要的 <code>SignTools.exe</code> ，其他的部分不需要，可以删掉这个镜像了。在 <code>C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe</code> 路径可以找到我们需要的工具。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560680492261.png" alt="1560680492261"></p><h2 id="5-签名安装"><a href="#5-签名安装" class="headerlink" title="5. 签名安装"></a>5. 签名安装</h2><p>在 msix 和证书文件所在目录打开 cmd，执行以下命令完成签名：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Windows Kits\<span class="number">10</span>\App Certification Kit\signtool.exe&quot; sign /fd SHA256 /a  /f WindowsTerminal.pfx /p 你的密码 CascadiaPackage_0.<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span>_x64.msix</span><br></pre></td></tr></table></figure><p>签好后再双击 msix 包，就可以顺利安装了。</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560680665789.png" alt="1560680665789"></p><p>Enjoy！</p><p><img src= "/images/loading.gif" data-lazy-src="/blogimg/Windows%20Terminal%20msxi%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E8%A3%85/1560681595443.png" alt="1560681595443"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows Terminal 一直没有发布可以直接安装的二进制文件，想自行编译的时候，看到系统需求中包含体积巨大的 Visual Studio 和 Windows SDK，脑袋都大了。直接下载其他人编译好的安装包又不放心，那么就想个办法避免在本地环境编译吧。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.coder17.com/categories/Windows/"/>
    
    
    <category term="Windows Terminal" scheme="https://www.coder17.com/tags/Windows-Terminal/"/>
    
    <category term="DevOps" scheme="https://www.coder17.com/tags/DevOps/"/>
    
    <category term="msxi" scheme="https://www.coder17.com/tags/msxi/"/>
    
    <category term="自签名" scheme="https://www.coder17.com/tags/%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
    
    <category term="编译" scheme="https://www.coder17.com/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="SignTools" scheme="https://www.coder17.com/tags/SignTools/"/>
    
  </entry>
  
  <entry>
    <title>Linux 显示 git 分支名</title>
    <link href="https://www.coder17.com/posts/linux-git-branch-name/"/>
    <id>https://www.coder17.com/posts/linux-git-branch-name/</id>
    <published>2019-05-21T19:16:00.000Z</published>
    <updated>2019-05-21T19:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Download <a href="https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh">this</a></p></li><li><p>Copy to <code>~/.git-prompt.sh</code>, or wget it.</p></li><li><p><code>.bashrc</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.git-prompt.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\[\e]0;\u@\h: \w\a\]$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;33m\]$(__git_ps1)\[\033[00m\]\$ &#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh&quot;&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="git" scheme="https://www.coder17.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ss-tunnel 转发 dns</title>
    <link href="https://www.coder17.com/posts/ss-tunnel-dns/"/>
    <id>https://www.coder17.com/posts/ss-tunnel-dns/</id>
    <published>2019-05-19T11:35:00.000Z</published>
    <updated>2019-05-19T11:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sudo /usr/<span class="built_in">local</span>/bin/ss-tunnel -c /etc/shadowsocks-libev/config.json -l 53 -v -b 127.0.0.1 -L 8.8.8.8:53 -u &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="Shadowsocks" scheme="https://www.coder17.com/tags/Shadowsocks/"/>
    
    <category term="ss-tunnel" scheme="https://www.coder17.com/tags/ss-tunnel/"/>
    
  </entry>
  
  <entry>
    <title>Proxychains 配置支持多场景和自定义 DNS</title>
    <link href="https://www.coder17.com/posts/proxychains-dns/"/>
    <id>https://www.coder17.com/posts/proxychains-dns/</id>
    <published>2019-05-19T09:20:00.000Z</published>
    <updated>2019-05-19T09:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Proxychains 开启时使用的是写死的公用 DNS 4.2.2.2，并不科学。同时只能支持一个代理或代理链，需要切换使用多个代理时并不方便。</p><p>下面以使用 <code>pc</code> 和 <code>pf</code> 两个命令分别连接两个不同的代理为例:</p><h2 id="链接-ss-的代理"><a href="#链接-ss-的代理" class="headerlink" title="链接 ss 的代理"></a>链接 ss 的代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">strict_chain</span><br><span class="line">quiet_mode</span><br><span class="line">proxy_dns</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line"><span class="section">[ProxyList]</span></span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure><h2 id="链接-fiddler-的代理"><a href="#链接-fiddler-的代理" class="headerlink" title="链接 fiddler 的代理"></a>链接 fiddler 的代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/proxyfiddler.conf</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">strict_chain</span><br><span class="line">quiet_mode</span><br><span class="line">proxy_dns</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line"><span class="section">[ProxyList]</span></span><br><span class="line">http  127.0.0.1 8888</span><br></pre></td></tr></table></figure><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><ul><li><code>pc xx</code> : use socks5 proxy 127.0.0.1:4411 to connect to xx</li><li><code>pf xx</code> : use http proxy 127.0.0.1:8888 to connect to xx, usually fiddler</li></ul><h2 id="Proxychains-4-NG"><a href="#Proxychains-4-NG" class="headerlink" title="Proxychains 4 NG"></a>Proxychains 4 NG</h2><p>新版没有以前不能解析域名的问题，直接安装即可。<br>但 Proxychains4 不支持 git，原因不明，会报错，因此使用 ProxychainsNG</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; sudo make install</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; rm -rf proxychains-ng</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">alias</span> pc=\<span class="string">&#x27;proxychains4\&#x27;</span> &gt;&gt; ~/.bash_aliases</span><br><span class="line">sudo ln -s ~/.bash_aliases /root/.bash_aliases</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">alias</span> pf=\<span class="string">&#x27;proxychains4 -f /etc/proxyfiddler.conf\&#x27;</span> &gt;&gt; ~/.bash_aliases</span><br></pre></td></tr></table></figure><hr><h2 id="以下适用于-Proxychains-3-版本，已过时"><a href="#以下适用于-Proxychains-3-版本，已过时" class="headerlink" title="以下适用于 Proxychains 3 版本，已过时"></a>以下适用于 Proxychains 3 版本，已过时</h2><h3 id="改源码支持指定-dns"><a href="#改源码支持指定-dns" class="headerlink" title="改源码支持指定 dns"></a>改源码支持指定 dns</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="variable">$HOME</span>/.proxychains</span><br><span class="line">sudo vim /usr/lib/proxychains3/proxyresolv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># This script is called by proxychains to resolve DNS names</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DNS server used to resolve names</span></span><br><span class="line">DNS_SERVER=<span class="variable">$&#123;PROXYRESOLV_DNS:-4.2.2.2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> = 0 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot; usage:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  proxyresolv &lt;hostname&gt; &quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=libproxychains.so.3</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$DNS_SERVER</span> = <span class="string">&quot;none&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    dig <span class="variable">$1</span> +tcp | awk <span class="string">&#x27;/A.+[0-9]+\.[0-9]+\.[0-9]/&#123;print $5;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    dig <span class="variable">$1</span> @<span class="variable">$DNS_SERVER</span> +tcp | awk <span class="string">&#x27;/A.+[0-9]+\.[0-9]+\.[0-9]/&#123;print $5;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">alias</span> pf=<span class="string">&#x27;ln -sf /etc/proxyfiddler.conf $HOME/.proxychains/proxychains.conf; PROXYRESOLV_DNS=none proxychains&#x27;</span> &gt;&gt; ~/.bash_aliases</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">alias</span> pc=<span class="string">&#x27;ln -sf /etc/proxychains.conf $HOME/.proxychains/proxychains.conf; proxychains&#x27;</span> &gt;&gt; ~/.bash_aliases</span><br><span class="line"></span><br><span class="line">sudo ln -s ~/.bash_aliases /root/.bash_aliases</span><br><span class="line">sudo ln -s ~/.proxychains /root/.proxychains</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Proxychains 开启时使用的是写死的公用 DNS 4.2.2.2，并不科学。同时只能支持一个代理或代理链，需要切换使用多个代理时并不方便。&lt;/p&gt;
&lt;p&gt;下面以使用 &lt;code&gt;pc&lt;/code&gt; 和 &lt;code&gt;pf&lt;/code&gt; 两个命令分别连接两个不同的代理为</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="Proxychains" scheme="https://www.coder17.com/tags/Proxychains/"/>
    
    <category term="DNS" scheme="https://www.coder17.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>安装 zsh</title>
    <link href="https://www.coder17.com/posts/install-zsh/"/>
    <id>https://www.coder17.com/posts/install-zsh/</id>
    <published>2019-05-18T19:16:00.000Z</published>
    <updated>2020-11-30T14:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-zsh"><a href="#1-zsh" class="headerlink" title="1. zsh"></a>1. zsh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure><h2 id="2-oh-my-zsh-and-theme"><a href="#2-oh-my-zsh-and-theme" class="headerlink" title="2. oh my zsh and theme"></a>2. <a href="https://github.com/robbyrussell/oh-my-zsh">oh my zsh</a> and theme</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><span class="line">sudo apt install fonts-powerline</span><br><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)</span><br><span class="line"><span class="meta">#</span><span class="bash"> see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes<span class="comment">#agnoster</span></span></span><br></pre></td></tr></table></figure><h2 id="3-WSL-ColorTool"><a href="#3-WSL-ColorTool" class="headerlink" title="3. WSL: ColorTool"></a>3. WSL: <a href="https://github.com/Microsoft/Terminal/tree/master/src/tools/ColorTool">ColorTool</a></h2><h2 id="4-Ctrl-Backspace-and-Ctrl-Delete"><a href="#4-Ctrl-Backspace-and-Ctrl-Delete" class="headerlink" title="4. Ctrl + Backspace and Ctrl + Delete"></a>4. <code>Ctrl + Backspace</code> and <code>Ctrl + Delete</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bindkey &#x27;^H&#x27; backward-kill-word&quot; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &quot;bindkey &#x27;^[[3;5~&#x27; kill-word&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p><a href="https://github.com/robbyrussell/oh-my-zsh/issues/7609">Why don’t Ctrl+Backspace and Ctrl+Delete work? · Issue #7609 · robbyrussell/oh-my-zsh · GitHub</a></p><h2 id="6-ll"><a href="#6-ll" class="headerlink" title="6. ll"></a>6. ll</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;alias ll=&#x27;ls -alhF&#x27;&quot; &gt;&gt; ~/.bash_aliases</span><br><span class="line">echo &quot;source \$HOME/.bash_aliases&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="5-Plugins"><a href="#5-Plugins" class="headerlink" title="5. Plugins"></a>5. Plugins</h2><h2 id="5-1-zsh-syntax-highlighting"><a href="#5-1-zsh-syntax-highlighting" class="headerlink" title="5.1 zsh-syntax-highlighting"></a>5.1 <a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">zsh-syntax-highlighting</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">chmod -R 755 $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><h2 id="5-2-zsh-autosuggestions"><a href="#5-2-zsh-autosuggestions" class="headerlink" title="5.2 zsh-autosuggestions"></a>5.2 <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">zsh-autosuggestions</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line">chmod -R 755 $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><h2 id="5-3-zsh-z"><a href="#5-3-zsh-z" class="headerlink" title="5.3 zsh-z"></a>5.3 <a href="https://github.com/agkozak/zsh-z#installation">zsh-z</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/agkozak/zsh-z $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-z</span><br><span class="line">chmod -R 755 $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-z</span><br></pre></td></tr></table></figure><h2 id="5-x-Enable"><a href="#5-x-Enable" class="headerlink" title="5.x Enable"></a>5.x Enable</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">plugins</span>=(</span><br><span class="line">    git</span><br><span class="line">    extract</span><br><span class="line">    z</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="6-WSL-fix-z-precmd-1-nice-5-failed-operation-not-permitted"><a href="#6-WSL-fix-z-precmd-1-nice-5-failed-operation-not-permitted" class="headerlink" title="6. WSL: fix \_z\_precmd:1: nice(5) failed: operation not permitted"></a>6. WSL: fix <code>\_z\_precmd:1: nice(5) failed: operation not permitted</code></h2><blockquote><p>By default, <code>zsh</code> tries to run background jobs at a lower priority, which Windows won’t let it do. A good workaround is to put</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $(uname -a) <span class="keyword">in</span></span><br><span class="line">*Microsoft*) <span class="built_in">unsetopt</span> BG_NICE ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>in your <code>.zshrc</code> file. That alters <code>zsh</code>‘s default behavior and fixes the problem entirely, in my experience.</p></blockquote><p><a href="https://github.com/rupa/z/issues/230">_z_precmd:1: nice(5) failed: operation not permitted · Issue #230 · rupa/z · GitHub</a></p><h2 id="7-Hide-local-username-and-host-name"><a href="#7-Hide-local-username-and-host-name" class="headerlink" title="7. Hide local username and host name"></a>7. Hide local username and host name</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;DEFAULT_USER=\&quot;\$USER\&quot;&quot; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="8-Change-host-name-text-color"><a href="#8-Change-host-name-text-color" class="headerlink" title="8. Change  host name text color"></a>8. Change  host name text color</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.oh-my-zsh/themes/agnoster.zsh-theme</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@@ -89,7 +89,7 @@ <span class="function"><span class="title">prompt_end</span></span>() &#123;</span><br><span class="line"> <span class="comment"># Context: user@hostname (who am I and where am I)</span></span><br><span class="line"> <span class="function"><span class="title">prompt_context</span></span>() &#123;</span><br><span class="line">   <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> != <span class="string">&quot;<span class="variable">$DEFAULT_USER</span>&quot;</span> || -n <span class="string">&quot;<span class="variable">$SSH_CLIENT</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">-    prompt_segment black default <span class="string">&quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)%n@%m&quot;</span></span><br><span class="line">+    prompt_segment cyan white <span class="string">&quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)%n@%m&quot;</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-zsh&quot;&gt;&lt;a href=&quot;#1-zsh&quot; class=&quot;headerlink&quot; title=&quot;1. zsh&quot;&gt;&lt;/a&gt;1. zsh&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.coder17.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.coder17.com/tags/Linux/"/>
    
    <category term="zsh" scheme="https://www.coder17.com/tags/zsh/"/>
    
    <category term="oh my zsh" scheme="https://www.coder17.com/tags/oh-my-zsh/"/>
    
  </entry>
  
</feed>
